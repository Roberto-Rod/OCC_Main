/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKDEVICESTATUS_H
#define _MOCKDEVICESTATUS_H

#include "DeviceStatus.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockDeviceStatus_Init(void);
void MockDeviceStatus_Destroy(void);
void MockDeviceStatus_Verify(void);




#define DeviceStatus_Init_Ignore() DeviceStatus_Init_CMockIgnore()
void DeviceStatus_Init_CMockIgnore(void);
#define DeviceStatus_Init_ExpectAnyArgs() DeviceStatus_Init_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_Init_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_Init_Expect() DeviceStatus_Init_CMockExpect(__LINE__)
void DeviceStatus_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_DeviceStatus_Init_CALLBACK)(int cmock_num_calls);
void DeviceStatus_Init_StubWithCallback(CMOCK_DeviceStatus_Init_CALLBACK Callback);
#define DeviceStatus_StateAndOnEntrySet_Ignore() DeviceStatus_StateAndOnEntrySet_CMockIgnore()
void DeviceStatus_StateAndOnEntrySet_CMockIgnore(void);
#define DeviceStatus_StateAndOnEntrySet_ExpectAnyArgs() DeviceStatus_StateAndOnEntrySet_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_StateAndOnEntrySet_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_StateAndOnEntrySet_Expect(StateOnEntry, state) DeviceStatus_StateAndOnEntrySet_CMockExpect(__LINE__, StateOnEntry, state)
void DeviceStatus_StateAndOnEntrySet_CMockExpect(UNITY_LINE_TYPE cmock_line, const bool_t StateOnEntry, const State_t state);
typedef void (* CMOCK_DeviceStatus_StateAndOnEntrySet_CALLBACK)(const bool_t StateOnEntry, const State_t state, int cmock_num_calls);
void DeviceStatus_StateAndOnEntrySet_StubWithCallback(CMOCK_DeviceStatus_StateAndOnEntrySet_CALLBACK Callback);
#define DeviceStatus_StateAndOnEntrySet_IgnoreArg_StateOnEntry() DeviceStatus_StateAndOnEntrySet_CMockIgnoreArg_StateOnEntry(__LINE__)
void DeviceStatus_StateAndOnEntrySet_CMockIgnoreArg_StateOnEntry(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_StateAndOnEntrySet_IgnoreArg_state() DeviceStatus_StateAndOnEntrySet_CMockIgnoreArg_state(__LINE__)
void DeviceStatus_StateAndOnEntrySet_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_GetState_IgnoreAndReturn(cmock_retval) DeviceStatus_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, State_t cmock_to_return);
#define DeviceStatus_GetState_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_GetState_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetState_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, State_t cmock_to_return);
#define DeviceStatus_GetState_ExpectAndReturn(cmock_retval) DeviceStatus_GetState_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, State_t cmock_to_return);
typedef State_t (* CMOCK_DeviceStatus_GetState_CALLBACK)(int cmock_num_calls);
void DeviceStatus_GetState_StubWithCallback(CMOCK_DeviceStatus_GetState_CALLBACK Callback);
#define DeviceStatus_SetNRE_Event_Ignore() DeviceStatus_SetNRE_Event_CMockIgnore()
void DeviceStatus_SetNRE_Event_CMockIgnore(void);
#define DeviceStatus_SetNRE_Event_ExpectAnyArgs() DeviceStatus_SetNRE_Event_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetNRE_Event_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetNRE_Event_Expect(event) DeviceStatus_SetNRE_Event_CMockExpect(__LINE__, event)
void DeviceStatus_SetNRE_Event_CMockExpect(UNITY_LINE_TYPE cmock_line, NRE_Event_t event);
typedef void (* CMOCK_DeviceStatus_SetNRE_Event_CALLBACK)(NRE_Event_t event, int cmock_num_calls);
void DeviceStatus_SetNRE_Event_StubWithCallback(CMOCK_DeviceStatus_SetNRE_Event_CALLBACK Callback);
#define DeviceStatus_SetNRE_Event_IgnoreArg_event() DeviceStatus_SetNRE_Event_CMockIgnoreArg_event(__LINE__)
void DeviceStatus_SetNRE_Event_CMockIgnoreArg_event(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_GetNRE_Event_IgnoreAndReturn(cmock_retval) DeviceStatus_GetNRE_Event_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetNRE_Event_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NRE_Event_t cmock_to_return);
#define DeviceStatus_GetNRE_Event_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_GetNRE_Event_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetNRE_Event_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NRE_Event_t cmock_to_return);
#define DeviceStatus_GetNRE_Event_ExpectAndReturn(cmock_retval) DeviceStatus_GetNRE_Event_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetNRE_Event_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NRE_Event_t cmock_to_return);
typedef NRE_Event_t (* CMOCK_DeviceStatus_GetNRE_Event_CALLBACK)(int cmock_num_calls);
void DeviceStatus_GetNRE_Event_StubWithCallback(CMOCK_DeviceStatus_GetNRE_Event_CALLBACK Callback);
#define DeviceStatus_GetOnEntry_IgnoreAndReturn(cmock_retval) DeviceStatus_GetOnEntry_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetOnEntry_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetOnEntry_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_GetOnEntry_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetOnEntry_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetOnEntry_ExpectAndReturn(cmock_retval) DeviceStatus_GetOnEntry_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetOnEntry_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_GetOnEntry_CALLBACK)(int cmock_num_calls);
void DeviceStatus_GetOnEntry_StubWithCallback(CMOCK_DeviceStatus_GetOnEntry_CALLBACK Callback);
#define DeviceStatus_SetLedsOnStatus_Ignore() DeviceStatus_SetLedsOnStatus_CMockIgnore()
void DeviceStatus_SetLedsOnStatus_CMockIgnore(void);
#define DeviceStatus_SetLedsOnStatus_ExpectAnyArgs() DeviceStatus_SetLedsOnStatus_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetLedsOnStatus_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetLedsOnStatus_Expect(LedsPowerOnStatus) DeviceStatus_SetLedsOnStatus_CMockExpect(__LINE__, LedsPowerOnStatus)
void DeviceStatus_SetLedsOnStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, bool_t LedsPowerOnStatus);
typedef void (* CMOCK_DeviceStatus_SetLedsOnStatus_CALLBACK)(bool_t LedsPowerOnStatus, int cmock_num_calls);
void DeviceStatus_SetLedsOnStatus_StubWithCallback(CMOCK_DeviceStatus_SetLedsOnStatus_CALLBACK Callback);
#define DeviceStatus_SetLedsOnStatus_IgnoreArg_LedsPowerOnStatus() DeviceStatus_SetLedsOnStatus_CMockIgnoreArg_LedsPowerOnStatus(__LINE__)
void DeviceStatus_SetLedsOnStatus_CMockIgnoreArg_LedsPowerOnStatus(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_GetLedsOnStatus_IgnoreAndReturn(cmock_retval) DeviceStatus_GetLedsOnStatus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetLedsOnStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetLedsOnStatus_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_GetLedsOnStatus_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetLedsOnStatus_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetLedsOnStatus_ExpectAndReturn(cmock_retval) DeviceStatus_GetLedsOnStatus_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetLedsOnStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_GetLedsOnStatus_CALLBACK)(int cmock_num_calls);
void DeviceStatus_GetLedsOnStatus_StubWithCallback(CMOCK_DeviceStatus_GetLedsOnStatus_CALLBACK Callback);
#define DeviceStatus_SetCheckStatusAlert_Ignore() DeviceStatus_SetCheckStatusAlert_CMockIgnore()
void DeviceStatus_SetCheckStatusAlert_CMockIgnore(void);
#define DeviceStatus_SetCheckStatusAlert_ExpectAnyArgs() DeviceStatus_SetCheckStatusAlert_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetCheckStatusAlert_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetCheckStatusAlert_Expect(EnableCheck) DeviceStatus_SetCheckStatusAlert_CMockExpect(__LINE__, EnableCheck)
void DeviceStatus_SetCheckStatusAlert_CMockExpect(UNITY_LINE_TYPE cmock_line, bool_t EnableCheck);
typedef void (* CMOCK_DeviceStatus_SetCheckStatusAlert_CALLBACK)(bool_t EnableCheck, int cmock_num_calls);
void DeviceStatus_SetCheckStatusAlert_StubWithCallback(CMOCK_DeviceStatus_SetCheckStatusAlert_CALLBACK Callback);
#define DeviceStatus_SetCheckStatusAlert_IgnoreArg_EnableCheck() DeviceStatus_SetCheckStatusAlert_CMockIgnoreArg_EnableCheck(__LINE__)
void DeviceStatus_SetCheckStatusAlert_CMockIgnoreArg_EnableCheck(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_GetCheckStatusAlert_IgnoreAndReturn(cmock_retval) DeviceStatus_GetCheckStatusAlert_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetCheckStatusAlert_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetCheckStatusAlert_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_GetCheckStatusAlert_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetCheckStatusAlert_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetCheckStatusAlert_ExpectAndReturn(cmock_retval) DeviceStatus_GetCheckStatusAlert_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetCheckStatusAlert_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_GetCheckStatusAlert_CALLBACK)(int cmock_num_calls);
void DeviceStatus_GetCheckStatusAlert_StubWithCallback(CMOCK_DeviceStatus_GetCheckStatusAlert_CALLBACK Callback);
#define DeviceStatus_SetDeepSleepModeStatus_Ignore() DeviceStatus_SetDeepSleepModeStatus_CMockIgnore()
void DeviceStatus_SetDeepSleepModeStatus_CMockIgnore(void);
#define DeviceStatus_SetDeepSleepModeStatus_ExpectAnyArgs() DeviceStatus_SetDeepSleepModeStatus_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetDeepSleepModeStatus_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetDeepSleepModeStatus_Expect(Enable) DeviceStatus_SetDeepSleepModeStatus_CMockExpect(__LINE__, Enable)
void DeviceStatus_SetDeepSleepModeStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, bool_t Enable);
typedef void (* CMOCK_DeviceStatus_SetDeepSleepModeStatus_CALLBACK)(bool_t Enable, int cmock_num_calls);
void DeviceStatus_SetDeepSleepModeStatus_StubWithCallback(CMOCK_DeviceStatus_SetDeepSleepModeStatus_CALLBACK Callback);
#define DeviceStatus_SetDeepSleepModeStatus_IgnoreArg_Enable() DeviceStatus_SetDeepSleepModeStatus_CMockIgnoreArg_Enable(__LINE__)
void DeviceStatus_SetDeepSleepModeStatus_CMockIgnoreArg_Enable(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_isGoingInDeepSleep_IgnoreAndReturn(cmock_retval) DeviceStatus_isGoingInDeepSleep_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_isGoingInDeepSleep_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_isGoingInDeepSleep_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_isGoingInDeepSleep_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_isGoingInDeepSleep_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_isGoingInDeepSleep_ExpectAndReturn(cmock_retval) DeviceStatus_isGoingInDeepSleep_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_isGoingInDeepSleep_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_isGoingInDeepSleep_CALLBACK)(int cmock_num_calls);
void DeviceStatus_isGoingInDeepSleep_StubWithCallback(CMOCK_DeviceStatus_isGoingInDeepSleep_CALLBACK Callback);
#define DeviceStatus_IsRunningPump_IgnoreAndReturn(cmock_retval) DeviceStatus_IsRunningPump_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_IsRunningPump_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_IsRunningPump_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_IsRunningPump_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_IsRunningPump_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_IsRunningPump_ExpectAndReturn(cmock_retval) DeviceStatus_IsRunningPump_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_IsRunningPump_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_IsRunningPump_CALLBACK)(int cmock_num_calls);
void DeviceStatus_IsRunningPump_StubWithCallback(CMOCK_DeviceStatus_IsRunningPump_CALLBACK Callback);
#define DeviceStatus_IsReadingPressureSensor_IgnoreAndReturn(cmock_retval) DeviceStatus_IsReadingPressureSensor_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_IsReadingPressureSensor_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_IsReadingPressureSensor_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_IsReadingPressureSensor_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_IsReadingPressureSensor_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_IsReadingPressureSensor_ExpectAndReturn(cmock_retval) DeviceStatus_IsReadingPressureSensor_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_IsReadingPressureSensor_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_IsReadingPressureSensor_CALLBACK)(int cmock_num_calls);
void DeviceStatus_IsReadingPressureSensor_StubWithCallback(CMOCK_DeviceStatus_IsReadingPressureSensor_CALLBACK Callback);
#define DeviceStatus_SetPumpIsRunning_Ignore() DeviceStatus_SetPumpIsRunning_CMockIgnore()
void DeviceStatus_SetPumpIsRunning_CMockIgnore(void);
#define DeviceStatus_SetPumpIsRunning_ExpectAnyArgs() DeviceStatus_SetPumpIsRunning_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetPumpIsRunning_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetPumpIsRunning_Expect(isRunning) DeviceStatus_SetPumpIsRunning_CMockExpect(__LINE__, isRunning)
void DeviceStatus_SetPumpIsRunning_CMockExpect(UNITY_LINE_TYPE cmock_line, bool_t isRunning);
typedef void (* CMOCK_DeviceStatus_SetPumpIsRunning_CALLBACK)(bool_t isRunning, int cmock_num_calls);
void DeviceStatus_SetPumpIsRunning_StubWithCallback(CMOCK_DeviceStatus_SetPumpIsRunning_CALLBACK Callback);
#define DeviceStatus_SetPumpIsRunning_IgnoreArg_isRunning() DeviceStatus_SetPumpIsRunning_CMockIgnoreArg_isRunning(__LINE__)
void DeviceStatus_SetPumpIsRunning_CMockIgnoreArg_isRunning(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetPressureSensorIsReading_Ignore() DeviceStatus_SetPressureSensorIsReading_CMockIgnore()
void DeviceStatus_SetPressureSensorIsReading_CMockIgnore(void);
#define DeviceStatus_SetPressureSensorIsReading_ExpectAnyArgs() DeviceStatus_SetPressureSensorIsReading_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetPressureSensorIsReading_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetPressureSensorIsReading_Expect(isReading) DeviceStatus_SetPressureSensorIsReading_CMockExpect(__LINE__, isReading)
void DeviceStatus_SetPressureSensorIsReading_CMockExpect(UNITY_LINE_TYPE cmock_line, bool_t isReading);
typedef void (* CMOCK_DeviceStatus_SetPressureSensorIsReading_CALLBACK)(bool_t isReading, int cmock_num_calls);
void DeviceStatus_SetPressureSensorIsReading_StubWithCallback(CMOCK_DeviceStatus_SetPressureSensorIsReading_CALLBACK Callback);
#define DeviceStatus_SetPressureSensorIsReading_IgnoreArg_isReading() DeviceStatus_SetPressureSensorIsReading_CMockIgnoreArg_isReading(__LINE__)
void DeviceStatus_SetPressureSensorIsReading_CMockIgnoreArg_isReading(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetButtonPressFromLeak_Ignore() DeviceStatus_SetButtonPressFromLeak_CMockIgnore()
void DeviceStatus_SetButtonPressFromLeak_CMockIgnore(void);
#define DeviceStatus_SetButtonPressFromLeak_ExpectAnyArgs() DeviceStatus_SetButtonPressFromLeak_CMockExpectAnyArgs(__LINE__)
void DeviceStatus_SetButtonPressFromLeak_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_SetButtonPressFromLeak_Expect(isPressed) DeviceStatus_SetButtonPressFromLeak_CMockExpect(__LINE__, isPressed)
void DeviceStatus_SetButtonPressFromLeak_CMockExpect(UNITY_LINE_TYPE cmock_line, bool_t isPressed);
typedef void (* CMOCK_DeviceStatus_SetButtonPressFromLeak_CALLBACK)(bool_t isPressed, int cmock_num_calls);
void DeviceStatus_SetButtonPressFromLeak_StubWithCallback(CMOCK_DeviceStatus_SetButtonPressFromLeak_CALLBACK Callback);
#define DeviceStatus_SetButtonPressFromLeak_IgnoreArg_isPressed() DeviceStatus_SetButtonPressFromLeak_CMockIgnoreArg_isPressed(__LINE__)
void DeviceStatus_SetButtonPressFromLeak_CMockIgnoreArg_isPressed(UNITY_LINE_TYPE cmock_line);
#define DeviceStatus_GetButtonPressFromLeak_IgnoreAndReturn(cmock_retval) DeviceStatus_GetButtonPressFromLeak_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetButtonPressFromLeak_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetButtonPressFromLeak_ExpectAnyArgsAndReturn(cmock_retval) DeviceStatus_GetButtonPressFromLeak_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetButtonPressFromLeak_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define DeviceStatus_GetButtonPressFromLeak_ExpectAndReturn(cmock_retval) DeviceStatus_GetButtonPressFromLeak_CMockExpectAndReturn(__LINE__, cmock_retval)
void DeviceStatus_GetButtonPressFromLeak_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_DeviceStatus_GetButtonPressFromLeak_CALLBACK)(int cmock_num_calls);
void DeviceStatus_GetButtonPressFromLeak_StubWithCallback(CMOCK_DeviceStatus_GetButtonPressFromLeak_CALLBACK Callback);

#endif
