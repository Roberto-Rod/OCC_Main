/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKEUSART_H
#define _MOCKEUSART_H

#include "eusart.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockeusart_Init(void);
void Mockeusart_Destroy(void);
void Mockeusart_Verify(void);




#define EUSART_Initialize_Ignore() EUSART_Initialize_CMockIgnore()
void EUSART_Initialize_CMockIgnore(void);
#define EUSART_Initialize_ExpectAnyArgs() EUSART_Initialize_CMockExpectAnyArgs(__LINE__)
void EUSART_Initialize_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define EUSART_Initialize_Expect() EUSART_Initialize_CMockExpect(__LINE__)
void EUSART_Initialize_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_EUSART_Initialize_CALLBACK)(int cmock_num_calls);
void EUSART_Initialize_StubWithCallback(CMOCK_EUSART_Initialize_CALLBACK Callback);
#define EUSART_is_tx_ready_IgnoreAndReturn(cmock_retval) EUSART_is_tx_ready_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void EUSART_is_tx_ready_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define EUSART_is_tx_ready_ExpectAnyArgsAndReturn(cmock_retval) EUSART_is_tx_ready_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void EUSART_is_tx_ready_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define EUSART_is_tx_ready_ExpectAndReturn(cmock_retval) EUSART_is_tx_ready_CMockExpectAndReturn(__LINE__, cmock_retval)
void EUSART_is_tx_ready_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
typedef _Bool (* CMOCK_EUSART_is_tx_ready_CALLBACK)(int cmock_num_calls);
void EUSART_is_tx_ready_StubWithCallback(CMOCK_EUSART_is_tx_ready_CALLBACK Callback);
#define EUSART_is_rx_ready_IgnoreAndReturn(cmock_retval) EUSART_is_rx_ready_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void EUSART_is_rx_ready_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define EUSART_is_rx_ready_ExpectAnyArgsAndReturn(cmock_retval) EUSART_is_rx_ready_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void EUSART_is_rx_ready_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define EUSART_is_rx_ready_ExpectAndReturn(cmock_retval) EUSART_is_rx_ready_CMockExpectAndReturn(__LINE__, cmock_retval)
void EUSART_is_rx_ready_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
typedef _Bool (* CMOCK_EUSART_is_rx_ready_CALLBACK)(int cmock_num_calls);
void EUSART_is_rx_ready_StubWithCallback(CMOCK_EUSART_is_rx_ready_CALLBACK Callback);
#define EUSART_is_tx_done_IgnoreAndReturn(cmock_retval) EUSART_is_tx_done_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void EUSART_is_tx_done_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define EUSART_is_tx_done_ExpectAnyArgsAndReturn(cmock_retval) EUSART_is_tx_done_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void EUSART_is_tx_done_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define EUSART_is_tx_done_ExpectAndReturn(cmock_retval) EUSART_is_tx_done_CMockExpectAndReturn(__LINE__, cmock_retval)
void EUSART_is_tx_done_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
typedef _Bool (* CMOCK_EUSART_is_tx_done_CALLBACK)(int cmock_num_calls);
void EUSART_is_tx_done_StubWithCallback(CMOCK_EUSART_is_tx_done_CALLBACK Callback);
#define EUSART_Read_IgnoreAndReturn(cmock_retval) EUSART_Read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void EUSART_Read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define EUSART_Read_ExpectAnyArgsAndReturn(cmock_retval) EUSART_Read_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void EUSART_Read_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define EUSART_Read_ExpectAndReturn(cmock_retval) EUSART_Read_CMockExpectAndReturn(__LINE__, cmock_retval)
void EUSART_Read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_EUSART_Read_CALLBACK)(int cmock_num_calls);
void EUSART_Read_StubWithCallback(CMOCK_EUSART_Read_CALLBACK Callback);
#define EUSART_Write_Ignore() EUSART_Write_CMockIgnore()
void EUSART_Write_CMockIgnore(void);
#define EUSART_Write_ExpectAnyArgs() EUSART_Write_CMockExpectAnyArgs(__LINE__)
void EUSART_Write_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define EUSART_Write_Expect(txData) EUSART_Write_CMockExpect(__LINE__, txData)
void EUSART_Write_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t txData);
typedef void (* CMOCK_EUSART_Write_CALLBACK)(uint8_t txData, int cmock_num_calls);
void EUSART_Write_StubWithCallback(CMOCK_EUSART_Write_CALLBACK Callback);
#define EUSART_Write_IgnoreArg_txData() EUSART_Write_CMockIgnoreArg_txData(__LINE__)
void EUSART_Write_CMockIgnoreArg_txData(UNITY_LINE_TYPE cmock_line);

#endif
