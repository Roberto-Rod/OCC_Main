/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPRESSURE_PART3_H
#define _MOCKPRESSURE_PART3_H

#include "Pressure_Part3.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockPressure_Part3_Init(void);
void MockPressure_Part3_Destroy(void);
void MockPressure_Part3_Verify(void);




#define PM_InitSensors_IgnoreAndReturn(cmock_retval) PM_InitSensors_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_InitSensors_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_InitSensors_ExpectAnyArgsAndReturn(cmock_retval) PM_InitSensors_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_InitSensors_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_InitSensors_ExpectAndReturn(cmock_retval) PM_InitSensors_CMockExpectAndReturn(__LINE__, cmock_retval)
void PM_InitSensors_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
typedef ErrorCode_t (* CMOCK_PM_InitSensors_CALLBACK)(int cmock_num_calls);
void PM_InitSensors_StubWithCallback(CMOCK_PM_InitSensors_CALLBACK Callback);
#define PM_StartSensors_IgnoreAndReturn(cmock_retval) PM_StartSensors_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_StartSensors_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_StartSensors_ExpectAnyArgsAndReturn(cmock_retval) PM_StartSensors_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_StartSensors_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_StartSensors_ExpectAndReturn(cmock_retval) PM_StartSensors_CMockExpectAndReturn(__LINE__, cmock_retval)
void PM_StartSensors_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
typedef ErrorCode_t (* CMOCK_PM_StartSensors_CALLBACK)(int cmock_num_calls);
void PM_StartSensors_StubWithCallback(CMOCK_PM_StartSensors_CALLBACK Callback);
#define PM_GetPressure_IgnoreAndReturn(cmock_retval) PM_GetPressure_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_GetPressure_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_GetPressure_ExpectAnyArgsAndReturn(cmock_retval) PM_GetPressure_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_GetPressure_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_GetPressure_ExpectAndReturn(Sensor, pPressure, pTemperature, cmock_retval) PM_GetPressure_CMockExpectAndReturn(__LINE__, Sensor, pPressure, pTemperature, cmock_retval)
void PM_GetPressure_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PressureSensor_t Sensor, uint16_t* pPressure, uint16_t* pTemperature, ErrorCode_t cmock_to_return);
typedef ErrorCode_t (* CMOCK_PM_GetPressure_CALLBACK)(PressureSensor_t Sensor, uint16_t* pPressure, uint16_t* pTemperature, int cmock_num_calls);
void PM_GetPressure_StubWithCallback(CMOCK_PM_GetPressure_CALLBACK Callback);
#define PM_GetPressure_ExpectWithArrayAndReturn(Sensor, pPressure, pPressure_Depth, pTemperature, pTemperature_Depth, cmock_retval) PM_GetPressure_CMockExpectWithArrayAndReturn(__LINE__, Sensor, pPressure, pPressure_Depth, pTemperature, pTemperature_Depth, cmock_retval)
void PM_GetPressure_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, PressureSensor_t Sensor, uint16_t* pPressure, int pPressure_Depth, uint16_t* pTemperature, int pTemperature_Depth, ErrorCode_t cmock_to_return);
#define PM_GetPressure_ReturnThruPtr_pPressure(pPressure) PM_GetPressure_CMockReturnMemThruPtr_pPressure(__LINE__, pPressure, sizeof(*pPressure))
#define PM_GetPressure_ReturnArrayThruPtr_pPressure(pPressure, cmock_len) PM_GetPressure_CMockReturnMemThruPtr_pPressure(__LINE__, pPressure, (int)(cmock_len * (int)sizeof(*pPressure)))
#define PM_GetPressure_ReturnMemThruPtr_pPressure(pPressure, cmock_size) PM_GetPressure_CMockReturnMemThruPtr_pPressure(__LINE__, pPressure, cmock_size)
void PM_GetPressure_CMockReturnMemThruPtr_pPressure(UNITY_LINE_TYPE cmock_line, uint16_t* pPressure, int cmock_size);
#define PM_GetPressure_ReturnThruPtr_pTemperature(pTemperature) PM_GetPressure_CMockReturnMemThruPtr_pTemperature(__LINE__, pTemperature, sizeof(*pTemperature))
#define PM_GetPressure_ReturnArrayThruPtr_pTemperature(pTemperature, cmock_len) PM_GetPressure_CMockReturnMemThruPtr_pTemperature(__LINE__, pTemperature, (int)(cmock_len * (int)sizeof(*pTemperature)))
#define PM_GetPressure_ReturnMemThruPtr_pTemperature(pTemperature, cmock_size) PM_GetPressure_CMockReturnMemThruPtr_pTemperature(__LINE__, pTemperature, cmock_size)
void PM_GetPressure_CMockReturnMemThruPtr_pTemperature(UNITY_LINE_TYPE cmock_line, uint16_t* pTemperature, int cmock_size);
#define PM_GetPressure_IgnoreArg_Sensor() PM_GetPressure_CMockIgnoreArg_Sensor(__LINE__)
void PM_GetPressure_CMockIgnoreArg_Sensor(UNITY_LINE_TYPE cmock_line);
#define PM_GetPressure_IgnoreArg_pPressure() PM_GetPressure_CMockIgnoreArg_pPressure(__LINE__)
void PM_GetPressure_CMockIgnoreArg_pPressure(UNITY_LINE_TYPE cmock_line);
#define PM_GetPressure_IgnoreArg_pTemperature() PM_GetPressure_CMockIgnoreArg_pTemperature(__LINE__)
void PM_GetPressure_CMockIgnoreArg_pTemperature(UNITY_LINE_TYPE cmock_line);
#define PM_CalcDiffPressure_IgnoreAndReturn(cmock_retval) PM_CalcDiffPressure_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_CalcDiffPressure_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_CalcDiffPressure_ExpectAnyArgsAndReturn(cmock_retval) PM_CalcDiffPressure_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_CalcDiffPressure_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PM_CalcDiffPressure_ExpectAndReturn(PresExt, PresInt, pDiff, cmock_retval) PM_CalcDiffPressure_CMockExpectAndReturn(__LINE__, PresExt, PresInt, pDiff, cmock_retval)
void PM_CalcDiffPressure_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t PresExt, uint16_t PresInt, uint16_t* pDiff, ErrorCode_t cmock_to_return);
typedef ErrorCode_t (* CMOCK_PM_CalcDiffPressure_CALLBACK)(uint16_t PresExt, uint16_t PresInt, uint16_t* pDiff, int cmock_num_calls);
void PM_CalcDiffPressure_StubWithCallback(CMOCK_PM_CalcDiffPressure_CALLBACK Callback);
#define PM_CalcDiffPressure_ExpectWithArrayAndReturn(PresExt, PresInt, pDiff, pDiff_Depth, cmock_retval) PM_CalcDiffPressure_CMockExpectWithArrayAndReturn(__LINE__, PresExt, PresInt, pDiff, pDiff_Depth, cmock_retval)
void PM_CalcDiffPressure_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t PresExt, uint16_t PresInt, uint16_t* pDiff, int pDiff_Depth, ErrorCode_t cmock_to_return);
#define PM_CalcDiffPressure_ReturnThruPtr_pDiff(pDiff) PM_CalcDiffPressure_CMockReturnMemThruPtr_pDiff(__LINE__, pDiff, sizeof(*pDiff))
#define PM_CalcDiffPressure_ReturnArrayThruPtr_pDiff(pDiff, cmock_len) PM_CalcDiffPressure_CMockReturnMemThruPtr_pDiff(__LINE__, pDiff, (int)(cmock_len * (int)sizeof(*pDiff)))
#define PM_CalcDiffPressure_ReturnMemThruPtr_pDiff(pDiff, cmock_size) PM_CalcDiffPressure_CMockReturnMemThruPtr_pDiff(__LINE__, pDiff, cmock_size)
void PM_CalcDiffPressure_CMockReturnMemThruPtr_pDiff(UNITY_LINE_TYPE cmock_line, uint16_t* pDiff, int cmock_size);
#define PM_CalcDiffPressure_IgnoreArg_PresExt() PM_CalcDiffPressure_CMockIgnoreArg_PresExt(__LINE__)
void PM_CalcDiffPressure_CMockIgnoreArg_PresExt(UNITY_LINE_TYPE cmock_line);
#define PM_CalcDiffPressure_IgnoreArg_PresInt() PM_CalcDiffPressure_CMockIgnoreArg_PresInt(__LINE__)
void PM_CalcDiffPressure_CMockIgnoreArg_PresInt(UNITY_LINE_TYPE cmock_line);
#define PM_CalcDiffPressure_IgnoreArg_pDiff() PM_CalcDiffPressure_CMockIgnoreArg_pDiff(__LINE__)
void PM_CalcDiffPressure_CMockIgnoreArg_pDiff(UNITY_LINE_TYPE cmock_line);
#define isPressureSensorReady_IgnoreAndReturn(cmock_retval) isPressureSensorReady_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void isPressureSensorReady_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define isPressureSensorReady_ExpectAnyArgsAndReturn(cmock_retval) isPressureSensorReady_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void isPressureSensorReady_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define isPressureSensorReady_ExpectAndReturn(Sensor, cmock_retval) isPressureSensorReady_CMockExpectAndReturn(__LINE__, Sensor, cmock_retval)
void isPressureSensorReady_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PressureSensor_t Sensor, bool_t cmock_to_return);
typedef bool_t (* CMOCK_isPressureSensorReady_CALLBACK)(PressureSensor_t Sensor, int cmock_num_calls);
void isPressureSensorReady_StubWithCallback(CMOCK_isPressureSensorReady_CALLBACK Callback);
#define isPressureSensorReady_IgnoreArg_Sensor() isPressureSensorReady_CMockIgnoreArg_Sensor(__LINE__)
void isPressureSensorReady_CMockIgnoreArg_Sensor(UNITY_LINE_TYPE cmock_line);
#define PM_GetPressureSensorBootOk_IgnoreAndReturn(cmock_retval) PM_GetPressureSensorBootOk_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_GetPressureSensorBootOk_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define PM_GetPressureSensorBootOk_ExpectAnyArgsAndReturn(cmock_retval) PM_GetPressureSensorBootOk_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_GetPressureSensorBootOk_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define PM_GetPressureSensorBootOk_ExpectAndReturn(Sensor, cmock_retval) PM_GetPressureSensorBootOk_CMockExpectAndReturn(__LINE__, Sensor, cmock_retval)
void PM_GetPressureSensorBootOk_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Sensor, bool_t cmock_to_return);
typedef bool_t (* CMOCK_PM_GetPressureSensorBootOk_CALLBACK)(uint8_t Sensor, int cmock_num_calls);
void PM_GetPressureSensorBootOk_StubWithCallback(CMOCK_PM_GetPressureSensorBootOk_CALLBACK Callback);
#define PM_GetPressureSensorBootOk_IgnoreArg_Sensor() PM_GetPressureSensorBootOk_CMockIgnoreArg_Sensor(__LINE__)
void PM_GetPressureSensorBootOk_CMockIgnoreArg_Sensor(UNITY_LINE_TYPE cmock_line);

#endif
