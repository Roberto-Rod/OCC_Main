/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPRESSURE_PART4_H
#define _MOCKPRESSURE_PART4_H

#include "Pressure_Part4.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockPressure_Part4_Init(void);
void MockPressure_Part4_Destroy(void);
void MockPressure_Part4_Verify(void);




#define PM_WritePressureSensors_IgnoreAndReturn(cmock_retval) PM_WritePressureSensors_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_WritePressureSensors_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define PM_WritePressureSensors_ExpectAnyArgsAndReturn(cmock_retval) PM_WritePressureSensors_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_WritePressureSensors_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define PM_WritePressureSensors_ExpectAndReturn(Device, DataLength, DataBuffer, cmock_retval) PM_WritePressureSensors_CMockExpectAndReturn(__LINE__, Device, DataLength, DataBuffer, cmock_retval)
void PM_WritePressureSensors_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Device, uint8_t DataLength, uint8_t* DataBuffer, bool_t cmock_to_return);
typedef bool_t (* CMOCK_PM_WritePressureSensors_CALLBACK)(uint8_t Device, uint8_t DataLength, uint8_t* DataBuffer, int cmock_num_calls);
void PM_WritePressureSensors_StubWithCallback(CMOCK_PM_WritePressureSensors_CALLBACK Callback);
#define PM_WritePressureSensors_ExpectWithArrayAndReturn(Device, DataLength, DataBuffer, DataBuffer_Depth, cmock_retval) PM_WritePressureSensors_CMockExpectWithArrayAndReturn(__LINE__, Device, DataLength, DataBuffer, DataBuffer_Depth, cmock_retval)
void PM_WritePressureSensors_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Device, uint8_t DataLength, uint8_t* DataBuffer, int DataBuffer_Depth, bool_t cmock_to_return);
#define PM_WritePressureSensors_ReturnThruPtr_DataBuffer(DataBuffer) PM_WritePressureSensors_CMockReturnMemThruPtr_DataBuffer(__LINE__, DataBuffer, sizeof(*DataBuffer))
#define PM_WritePressureSensors_ReturnArrayThruPtr_DataBuffer(DataBuffer, cmock_len) PM_WritePressureSensors_CMockReturnMemThruPtr_DataBuffer(__LINE__, DataBuffer, (int)(cmock_len * (int)sizeof(*DataBuffer)))
#define PM_WritePressureSensors_ReturnMemThruPtr_DataBuffer(DataBuffer, cmock_size) PM_WritePressureSensors_CMockReturnMemThruPtr_DataBuffer(__LINE__, DataBuffer, cmock_size)
void PM_WritePressureSensors_CMockReturnMemThruPtr_DataBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* DataBuffer, int cmock_size);
#define PM_WritePressureSensors_IgnoreArg_Device() PM_WritePressureSensors_CMockIgnoreArg_Device(__LINE__)
void PM_WritePressureSensors_CMockIgnoreArg_Device(UNITY_LINE_TYPE cmock_line);
#define PM_WritePressureSensors_IgnoreArg_DataLength() PM_WritePressureSensors_CMockIgnoreArg_DataLength(__LINE__)
void PM_WritePressureSensors_CMockIgnoreArg_DataLength(UNITY_LINE_TYPE cmock_line);
#define PM_WritePressureSensors_IgnoreArg_DataBuffer() PM_WritePressureSensors_CMockIgnoreArg_DataBuffer(__LINE__)
void PM_WritePressureSensors_CMockIgnoreArg_DataBuffer(UNITY_LINE_TYPE cmock_line);
#define PM_ReadPressureSensors_IgnoreAndReturn(cmock_retval) PM_ReadPressureSensors_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PM_ReadPressureSensors_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define PM_ReadPressureSensors_ExpectAnyArgsAndReturn(cmock_retval) PM_ReadPressureSensors_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PM_ReadPressureSensors_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define PM_ReadPressureSensors_ExpectAndReturn(Device, DataLength, DataAddress, DataBuffer, cmock_retval) PM_ReadPressureSensors_CMockExpectAndReturn(__LINE__, Device, DataLength, DataAddress, DataBuffer, cmock_retval)
void PM_ReadPressureSensors_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Device, uint8_t DataLength, uint8_t DataAddress, uint8_t* DataBuffer, bool_t cmock_to_return);
typedef bool_t (* CMOCK_PM_ReadPressureSensors_CALLBACK)(uint8_t Device, uint8_t DataLength, uint8_t DataAddress, uint8_t* DataBuffer, int cmock_num_calls);
void PM_ReadPressureSensors_StubWithCallback(CMOCK_PM_ReadPressureSensors_CALLBACK Callback);
#define PM_ReadPressureSensors_ExpectWithArrayAndReturn(Device, DataLength, DataAddress, DataBuffer, DataBuffer_Depth, cmock_retval) PM_ReadPressureSensors_CMockExpectWithArrayAndReturn(__LINE__, Device, DataLength, DataAddress, DataBuffer, DataBuffer_Depth, cmock_retval)
void PM_ReadPressureSensors_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Device, uint8_t DataLength, uint8_t DataAddress, uint8_t* DataBuffer, int DataBuffer_Depth, bool_t cmock_to_return);
#define PM_ReadPressureSensors_ReturnThruPtr_DataBuffer(DataBuffer) PM_ReadPressureSensors_CMockReturnMemThruPtr_DataBuffer(__LINE__, DataBuffer, sizeof(*DataBuffer))
#define PM_ReadPressureSensors_ReturnArrayThruPtr_DataBuffer(DataBuffer, cmock_len) PM_ReadPressureSensors_CMockReturnMemThruPtr_DataBuffer(__LINE__, DataBuffer, (int)(cmock_len * (int)sizeof(*DataBuffer)))
#define PM_ReadPressureSensors_ReturnMemThruPtr_DataBuffer(DataBuffer, cmock_size) PM_ReadPressureSensors_CMockReturnMemThruPtr_DataBuffer(__LINE__, DataBuffer, cmock_size)
void PM_ReadPressureSensors_CMockReturnMemThruPtr_DataBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* DataBuffer, int cmock_size);
#define PM_ReadPressureSensors_IgnoreArg_Device() PM_ReadPressureSensors_CMockIgnoreArg_Device(__LINE__)
void PM_ReadPressureSensors_CMockIgnoreArg_Device(UNITY_LINE_TYPE cmock_line);
#define PM_ReadPressureSensors_IgnoreArg_DataLength() PM_ReadPressureSensors_CMockIgnoreArg_DataLength(__LINE__)
void PM_ReadPressureSensors_CMockIgnoreArg_DataLength(UNITY_LINE_TYPE cmock_line);
#define PM_ReadPressureSensors_IgnoreArg_DataAddress() PM_ReadPressureSensors_CMockIgnoreArg_DataAddress(__LINE__)
void PM_ReadPressureSensors_CMockIgnoreArg_DataAddress(UNITY_LINE_TYPE cmock_line);
#define PM_ReadPressureSensors_IgnoreArg_DataBuffer() PM_ReadPressureSensors_CMockIgnoreArg_DataBuffer(__LINE__)
void PM_ReadPressureSensors_CMockIgnoreArg_DataBuffer(UNITY_LINE_TYPE cmock_line);

#endif
