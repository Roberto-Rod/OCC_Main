/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPERFORMANCELOGGER_H
#define _MOCKPERFORMANCELOGGER_H

#include "PerformanceLogger.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockPerformanceLogger_Init(void);
void MockPerformanceLogger_Destroy(void);
void MockPerformanceLogger_Verify(void);




#define PerformanceLogger_Init_Ignore() PerformanceLogger_Init_CMockIgnore()
void PerformanceLogger_Init_CMockIgnore(void);
#define PerformanceLogger_Init_ExpectAnyArgs() PerformanceLogger_Init_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_Init_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_Init_Expect() PerformanceLogger_Init_CMockExpect(__LINE__)
void PerformanceLogger_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PerformanceLogger_Init_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_Init_StubWithCallback(CMOCK_PerformanceLogger_Init_CALLBACK Callback);
#define PerformanceLogger_SetDifferentialPressure_Ignore() PerformanceLogger_SetDifferentialPressure_CMockIgnore()
void PerformanceLogger_SetDifferentialPressure_CMockIgnore(void);
#define PerformanceLogger_SetDifferentialPressure_ExpectAnyArgs() PerformanceLogger_SetDifferentialPressure_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetDifferentialPressure_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetDifferentialPressure_Expect(pressureMilliBar) PerformanceLogger_SetDifferentialPressure_CMockExpect(__LINE__, pressureMilliBar)
void PerformanceLogger_SetDifferentialPressure_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint16_t pressureMilliBar);
typedef void (* CMOCK_PerformanceLogger_SetDifferentialPressure_CALLBACK)(const uint16_t pressureMilliBar, int cmock_num_calls);
void PerformanceLogger_SetDifferentialPressure_StubWithCallback(CMOCK_PerformanceLogger_SetDifferentialPressure_CALLBACK Callback);
#define PerformanceLogger_SetDifferentialPressure_IgnoreArg_pressureMilliBar() PerformanceLogger_SetDifferentialPressure_CMockIgnoreArg_pressureMilliBar(__LINE__)
void PerformanceLogger_SetDifferentialPressure_CMockIgnoreArg_pressureMilliBar(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetExternalPressure_Ignore() PerformanceLogger_SetExternalPressure_CMockIgnore()
void PerformanceLogger_SetExternalPressure_CMockIgnore(void);
#define PerformanceLogger_SetExternalPressure_ExpectAnyArgs() PerformanceLogger_SetExternalPressure_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetExternalPressure_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetExternalPressure_Expect(pressureMilliBar) PerformanceLogger_SetExternalPressure_CMockExpect(__LINE__, pressureMilliBar)
void PerformanceLogger_SetExternalPressure_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint16_t pressureMilliBar);
typedef void (* CMOCK_PerformanceLogger_SetExternalPressure_CALLBACK)(const uint16_t pressureMilliBar, int cmock_num_calls);
void PerformanceLogger_SetExternalPressure_StubWithCallback(CMOCK_PerformanceLogger_SetExternalPressure_CALLBACK Callback);
#define PerformanceLogger_SetExternalPressure_IgnoreArg_pressureMilliBar() PerformanceLogger_SetExternalPressure_CMockIgnoreArg_pressureMilliBar(__LINE__)
void PerformanceLogger_SetExternalPressure_CMockIgnoreArg_pressureMilliBar(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetPumpHistory_Ignore() PerformanceLogger_SetPumpHistory_CMockIgnore()
void PerformanceLogger_SetPumpHistory_CMockIgnore(void);
#define PerformanceLogger_SetPumpHistory_ExpectAnyArgs() PerformanceLogger_SetPumpHistory_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetPumpHistory_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetPumpHistory_Expect(pumpHistory) PerformanceLogger_SetPumpHistory_CMockExpect(__LINE__, pumpHistory)
void PerformanceLogger_SetPumpHistory_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t pumpHistory);
typedef void (* CMOCK_PerformanceLogger_SetPumpHistory_CALLBACK)(const uint32_t pumpHistory, int cmock_num_calls);
void PerformanceLogger_SetPumpHistory_StubWithCallback(CMOCK_PerformanceLogger_SetPumpHistory_CALLBACK Callback);
#define PerformanceLogger_SetPumpHistory_IgnoreArg_pumpHistory() PerformanceLogger_SetPumpHistory_CMockIgnoreArg_pumpHistory(__LINE__)
void PerformanceLogger_SetPumpHistory_CMockIgnoreArg_pumpHistory(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetBatteryVoltage_Ignore() PerformanceLogger_SetBatteryVoltage_CMockIgnore()
void PerformanceLogger_SetBatteryVoltage_CMockIgnore(void);
#define PerformanceLogger_SetBatteryVoltage_ExpectAnyArgs() PerformanceLogger_SetBatteryVoltage_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetBatteryVoltage_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetBatteryVoltage_Expect(voltageMilliVolts) PerformanceLogger_SetBatteryVoltage_CMockExpect(__LINE__, voltageMilliVolts)
void PerformanceLogger_SetBatteryVoltage_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint16_t voltageMilliVolts);
typedef void (* CMOCK_PerformanceLogger_SetBatteryVoltage_CALLBACK)(const uint16_t voltageMilliVolts, int cmock_num_calls);
void PerformanceLogger_SetBatteryVoltage_StubWithCallback(CMOCK_PerformanceLogger_SetBatteryVoltage_CALLBACK Callback);
#define PerformanceLogger_SetBatteryVoltage_IgnoreArg_voltageMilliVolts() PerformanceLogger_SetBatteryVoltage_CMockIgnoreArg_voltageMilliVolts(__LINE__)
void PerformanceLogger_SetBatteryVoltage_CMockIgnoreArg_voltageMilliVolts(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetInternalTemperature_Ignore() PerformanceLogger_SetInternalTemperature_CMockIgnore()
void PerformanceLogger_SetInternalTemperature_CMockIgnore(void);
#define PerformanceLogger_SetInternalTemperature_ExpectAnyArgs() PerformanceLogger_SetInternalTemperature_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetInternalTemperature_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetInternalTemperature_Expect(temperatureRawSensorValue) PerformanceLogger_SetInternalTemperature_CMockExpect(__LINE__, temperatureRawSensorValue)
void PerformanceLogger_SetInternalTemperature_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint16_t temperatureRawSensorValue);
typedef void (* CMOCK_PerformanceLogger_SetInternalTemperature_CALLBACK)(const uint16_t temperatureRawSensorValue, int cmock_num_calls);
void PerformanceLogger_SetInternalTemperature_StubWithCallback(CMOCK_PerformanceLogger_SetInternalTemperature_CALLBACK Callback);
#define PerformanceLogger_SetInternalTemperature_IgnoreArg_temperatureRawSensorValue() PerformanceLogger_SetInternalTemperature_CMockIgnoreArg_temperatureRawSensorValue(__LINE__)
void PerformanceLogger_SetInternalTemperature_CMockIgnoreArg_temperatureRawSensorValue(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetExternalTemperature_Ignore() PerformanceLogger_SetExternalTemperature_CMockIgnore()
void PerformanceLogger_SetExternalTemperature_CMockIgnore(void);
#define PerformanceLogger_SetExternalTemperature_ExpectAnyArgs() PerformanceLogger_SetExternalTemperature_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetExternalTemperature_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetExternalTemperature_Expect(temperatureRawSensorValue) PerformanceLogger_SetExternalTemperature_CMockExpect(__LINE__, temperatureRawSensorValue)
void PerformanceLogger_SetExternalTemperature_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint16_t temperatureRawSensorValue);
typedef void (* CMOCK_PerformanceLogger_SetExternalTemperature_CALLBACK)(const uint16_t temperatureRawSensorValue, int cmock_num_calls);
void PerformanceLogger_SetExternalTemperature_StubWithCallback(CMOCK_PerformanceLogger_SetExternalTemperature_CALLBACK Callback);
#define PerformanceLogger_SetExternalTemperature_IgnoreArg_temperatureRawSensorValue() PerformanceLogger_SetExternalTemperature_CMockIgnoreArg_temperatureRawSensorValue(__LINE__)
void PerformanceLogger_SetExternalTemperature_CMockIgnoreArg_temperatureRawSensorValue(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetStatus_Ignore() PerformanceLogger_SetStatus_CMockIgnore()
void PerformanceLogger_SetStatus_CMockIgnore(void);
#define PerformanceLogger_SetStatus_ExpectAnyArgs() PerformanceLogger_SetStatus_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetStatus_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetStatus_Expect(deviceStatus) PerformanceLogger_SetStatus_CMockExpect(__LINE__, deviceStatus)
void PerformanceLogger_SetStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t deviceStatus);
typedef void (* CMOCK_PerformanceLogger_SetStatus_CALLBACK)(const uint8_t deviceStatus, int cmock_num_calls);
void PerformanceLogger_SetStatus_StubWithCallback(CMOCK_PerformanceLogger_SetStatus_CALLBACK Callback);
#define PerformanceLogger_SetStatus_IgnoreArg_deviceStatus() PerformanceLogger_SetStatus_CMockIgnoreArg_deviceStatus(__LINE__)
void PerformanceLogger_SetStatus_CMockIgnoreArg_deviceStatus(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetPumpDownDuration_Ignore() PerformanceLogger_SetPumpDownDuration_CMockIgnore()
void PerformanceLogger_SetPumpDownDuration_CMockIgnore(void);
#define PerformanceLogger_SetPumpDownDuration_ExpectAnyArgs() PerformanceLogger_SetPumpDownDuration_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetPumpDownDuration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetPumpDownDuration_Expect(duration100Ms) PerformanceLogger_SetPumpDownDuration_CMockExpect(__LINE__, duration100Ms)
void PerformanceLogger_SetPumpDownDuration_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t duration100Ms);
typedef void (* CMOCK_PerformanceLogger_SetPumpDownDuration_CALLBACK)(const uint8_t duration100Ms, int cmock_num_calls);
void PerformanceLogger_SetPumpDownDuration_StubWithCallback(CMOCK_PerformanceLogger_SetPumpDownDuration_CALLBACK Callback);
#define PerformanceLogger_SetPumpDownDuration_IgnoreArg_duration100Ms() PerformanceLogger_SetPumpDownDuration_CMockIgnoreArg_duration100Ms(__LINE__)
void PerformanceLogger_SetPumpDownDuration_CMockIgnoreArg_duration100Ms(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetIPDDuration_Ignore() PerformanceLogger_SetIPDDuration_CMockIgnore()
void PerformanceLogger_SetIPDDuration_CMockIgnore(void);
#define PerformanceLogger_SetIPDDuration_ExpectAnyArgs() PerformanceLogger_SetIPDDuration_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetIPDDuration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetIPDDuration_Expect(durationTicks) PerformanceLogger_SetIPDDuration_CMockExpect(__LINE__, durationTicks)
void PerformanceLogger_SetIPDDuration_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t durationTicks);
typedef void (* CMOCK_PerformanceLogger_SetIPDDuration_CALLBACK)(const uint8_t durationTicks, int cmock_num_calls);
void PerformanceLogger_SetIPDDuration_StubWithCallback(CMOCK_PerformanceLogger_SetIPDDuration_CALLBACK Callback);
#define PerformanceLogger_SetIPDDuration_IgnoreArg_durationTicks() PerformanceLogger_SetIPDDuration_CMockIgnoreArg_durationTicks(__LINE__)
void PerformanceLogger_SetIPDDuration_CMockIgnoreArg_durationTicks(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_GetPumpDownDuration100Ms_IgnoreAndReturn(cmock_retval) PerformanceLogger_GetPumpDownDuration100Ms_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetPumpDownDuration100Ms_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define PerformanceLogger_GetPumpDownDuration100Ms_ExpectAnyArgsAndReturn(cmock_retval) PerformanceLogger_GetPumpDownDuration100Ms_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetPumpDownDuration100Ms_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define PerformanceLogger_GetPumpDownDuration100Ms_ExpectAndReturn(cmock_retval) PerformanceLogger_GetPumpDownDuration100Ms_CMockExpectAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetPumpDownDuration100Ms_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_PerformanceLogger_GetPumpDownDuration100Ms_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_GetPumpDownDuration100Ms_StubWithCallback(CMOCK_PerformanceLogger_GetPumpDownDuration100Ms_CALLBACK Callback);
#define PerformanceLogger_SkipToNextTimeline_Ignore() PerformanceLogger_SkipToNextTimeline_CMockIgnore()
void PerformanceLogger_SkipToNextTimeline_CMockIgnore(void);
#define PerformanceLogger_SkipToNextTimeline_ExpectAnyArgs() PerformanceLogger_SkipToNextTimeline_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SkipToNextTimeline_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SkipToNextTimeline_Expect() PerformanceLogger_SkipToNextTimeline_CMockExpect(__LINE__)
void PerformanceLogger_SkipToNextTimeline_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PerformanceLogger_SkipToNextTimeline_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_SkipToNextTimeline_StubWithCallback(CMOCK_PerformanceLogger_SkipToNextTimeline_CALLBACK Callback);
#define PerformanceLogger_Persist_IgnoreAndReturn(cmock_retval) PerformanceLogger_Persist_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_Persist_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PerformanceLogger_Persist_ExpectAnyArgsAndReturn(cmock_retval) PerformanceLogger_Persist_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_Persist_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PerformanceLogger_Persist_ExpectAndReturn(cmock_retval) PerformanceLogger_Persist_CMockExpectAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_Persist_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
typedef ErrorCode_t (* CMOCK_PerformanceLogger_Persist_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_Persist_StubWithCallback(CMOCK_PerformanceLogger_Persist_CALLBACK Callback);
#define PerformanceLogger_SetNRE_IgnoreAndReturn(cmock_retval) PerformanceLogger_SetNRE_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_SetNRE_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PerformanceLogger_SetNRE_ExpectAnyArgsAndReturn(cmock_retval) PerformanceLogger_SetNRE_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_SetNRE_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
#define PerformanceLogger_SetNRE_ExpectAndReturn(cmock_retval) PerformanceLogger_SetNRE_CMockExpectAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_SetNRE_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ErrorCode_t cmock_to_return);
typedef ErrorCode_t (* CMOCK_PerformanceLogger_SetNRE_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_SetNRE_StubWithCallback(CMOCK_PerformanceLogger_SetNRE_CALLBACK Callback);
#define PerformanceLogger_GetNRE_IgnoreAndReturn(cmock_retval) PerformanceLogger_GetNRE_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetNRE_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define PerformanceLogger_GetNRE_ExpectAnyArgsAndReturn(cmock_retval) PerformanceLogger_GetNRE_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetNRE_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define PerformanceLogger_GetNRE_ExpectAndReturn(cmock_retval) PerformanceLogger_GetNRE_CMockExpectAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetNRE_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
typedef _Bool (* CMOCK_PerformanceLogger_GetNRE_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_GetNRE_StubWithCallback(CMOCK_PerformanceLogger_GetNRE_CALLBACK Callback);
#define PerformanceLogger_Get_IgnoreAndReturn(cmock_retval) PerformanceLogger_Get_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_Get_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, PerformanceLogger_t* cmock_to_return);
#define PerformanceLogger_Get_ExpectAnyArgsAndReturn(cmock_retval) PerformanceLogger_Get_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_Get_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, PerformanceLogger_t* cmock_to_return);
#define PerformanceLogger_Get_ExpectAndReturn(cmock_retval) PerformanceLogger_Get_CMockExpectAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_Get_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PerformanceLogger_t* cmock_to_return);
typedef PerformanceLogger_t* (* CMOCK_PerformanceLogger_Get_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_Get_StubWithCallback(CMOCK_PerformanceLogger_Get_CALLBACK Callback);
#define PerformanceLogger_GetCurrentAddress_IgnoreAndReturn(cmock_retval) PerformanceLogger_GetCurrentAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetCurrentAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define PerformanceLogger_GetCurrentAddress_ExpectAnyArgsAndReturn(cmock_retval) PerformanceLogger_GetCurrentAddress_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetCurrentAddress_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define PerformanceLogger_GetCurrentAddress_ExpectAndReturn(cmock_retval) PerformanceLogger_GetCurrentAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void PerformanceLogger_GetCurrentAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_PerformanceLogger_GetCurrentAddress_CALLBACK)(int cmock_num_calls);
void PerformanceLogger_GetCurrentAddress_StubWithCallback(CMOCK_PerformanceLogger_GetCurrentAddress_CALLBACK Callback);
#define PerformanceLogger_SetCurrentAddress_Ignore() PerformanceLogger_SetCurrentAddress_CMockIgnore()
void PerformanceLogger_SetCurrentAddress_CMockIgnore(void);
#define PerformanceLogger_SetCurrentAddress_ExpectAnyArgs() PerformanceLogger_SetCurrentAddress_CMockExpectAnyArgs(__LINE__)
void PerformanceLogger_SetCurrentAddress_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define PerformanceLogger_SetCurrentAddress_Expect(address) PerformanceLogger_SetCurrentAddress_CMockExpect(__LINE__, address)
void PerformanceLogger_SetCurrentAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t address);
typedef void (* CMOCK_PerformanceLogger_SetCurrentAddress_CALLBACK)(const uint32_t address, int cmock_num_calls);
void PerformanceLogger_SetCurrentAddress_StubWithCallback(CMOCK_PerformanceLogger_SetCurrentAddress_CALLBACK Callback);
#define PerformanceLogger_SetCurrentAddress_IgnoreArg_address() PerformanceLogger_SetCurrentAddress_CMockIgnoreArg_address(__LINE__)
void PerformanceLogger_SetCurrentAddress_CMockIgnoreArg_address(UNITY_LINE_TYPE cmock_line);

#endif
