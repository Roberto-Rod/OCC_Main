<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MKY.IO.Serial</name>
    </assembly>
    <members>
        <member name="T:MKY.IO.Serial.ErrorSeverity">
            <summary></summary>
        </member>
        <member name="T:MKY.IO.Serial.Direction">
            <summary></summary>
        </member>
        <member name="T:MKY.IO.Serial.DataEventArgs">
            <summary>
            Defines event data of an I/O data transfer. In addition to the serial data itself,
            it also contains meta information such as a time stamp.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.DataEventArgs.Data">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.DataEventArgs.TimeStamp">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.DataEventArgs.Device">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataEventArgs.#ctor(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataEventArgs.#ctor(System.Byte[],System.DateTime)">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.DataEventArgs.DataAsPrintableString">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataEventArgs.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.DataEventArgs.ToDiagnosticsString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <remarks>
            Extended <see cref="M:MKY.IO.Serial.DataEventArgs.ToString"/> method which can be used for trace/debug.
            </remarks>
            <remarks>
            Limited to a single line to keep debug output compact, same as <see cref="M:MKY.IO.Serial.DataEventArgs.ToString"/>.
            </remarks>
        </member>
        <member name="T:MKY.IO.Serial.DataReceivedEventArgs">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataReceivedEventArgs.#ctor(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataReceivedEventArgs.#ctor(System.Byte[],System.DateTime)">
            <summary></summary>
        </member>
        <member name="T:MKY.IO.Serial.DataSentEventArgs">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataSentEventArgs.#ctor(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.DataSentEventArgs.#ctor(System.Byte[],System.DateTime)">
            <summary></summary>
        </member>
        <member name="T:MKY.IO.Serial.IOMessageEventArgs">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IOMessageEventArgs.Direction">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IOMessageEventArgs.Message">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IOMessageEventArgs.TimeStamp">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOMessageEventArgs.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOMessageEventArgs.#ctor(System.String,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOMessageEventArgs.#ctor(MKY.IO.Serial.Direction,System.String)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOMessageEventArgs.#ctor(MKY.IO.Serial.Direction,System.String,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOMessageEventArgs.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IOMessageEventArgs.ToDiagnosticsString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <remarks>
            Extended <see cref="M:MKY.IO.Serial.IOMessageEventArgs.ToString"/> method which can be used for trace/debug.
            </remarks>
            <remarks>
            Limited to a single line to keep debug output compact, same as <see cref="M:MKY.IO.Serial.IOMessageEventArgs.ToString"/>.
            </remarks>
        </member>
        <member name="T:MKY.IO.Serial.IOWarningEventArgs">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOWarningEventArgs.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOWarningEventArgs.#ctor(System.String,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOWarningEventArgs.#ctor(MKY.IO.Serial.Direction,System.String)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOWarningEventArgs.#ctor(MKY.IO.Serial.Direction,System.String,System.DateTime)">
            <summary></summary>
        </member>
        <member name="T:MKY.IO.Serial.IOErrorEventArgs">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IOErrorEventArgs.Severity">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOErrorEventArgs.#ctor(MKY.IO.Serial.ErrorSeverity,System.String)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOErrorEventArgs.#ctor(MKY.IO.Serial.ErrorSeverity,System.String,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOErrorEventArgs.#ctor(MKY.IO.Serial.ErrorSeverity,MKY.IO.Serial.Direction,System.String)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOErrorEventArgs.#ctor(MKY.IO.Serial.ErrorSeverity,MKY.IO.Serial.Direction,System.String,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IOErrorEventArgs.ToDiagnosticsString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <remarks>
            Extended <see cref="M:MKY.IO.Serial.IOMessageEventArgs.ToString"/> method which can be used for trace/debug.
            </remarks>
            <remarks>
            Limited to a single line to keep debug output compact, same as <see cref="M:MKY.IO.Serial.IOMessageEventArgs.ToString"/>.
            </remarks>
        </member>
        <member name="T:MKY.IO.Serial.SerialPortErrorEventArgs">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.SerialPortErrorEventArgs.SerialPortError">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.SerialPortErrorEventArgs.#ctor(MKY.IO.Serial.ErrorSeverity,MKY.IO.Serial.Direction,System.String,System.IO.Ports.SerialError)">
            <summary></summary>
        </member>
        <member name="T:MKY.IO.Serial.IIOProvider">
            <summary>
            Generic I/O interface that is usable for any kind of serial communication.
            </summary>
            <remarks>
            While this interface is generic, it is instantiated by accompanying classes. Details on the
            behavior of these classes are contained in the remarks of the interface for convenience.
            </remarks>
        </member>
        <member name="E:MKY.IO.Serial.IIOProvider.IOChanged">
            <summary>
            Event raised after the I/O provider's state has changed, e.g. started or stopped.
            </summary>
        </member>
        <member name="E:MKY.IO.Serial.IIOProvider.IOControlChanged">
            <summary>
            Event raised after the I/O provider's control state has changed.
            </summary>
            <remarks><list type="bullet">
            <item><term>Serial COM Ports:</term><description>
            This event indicates a change of the serial control pins.
            </description></item>
            </list></remarks>
        </member>
        <member name="E:MKY.IO.Serial.IIOProvider.IOWarning">
            <summary>
            Event raised after an I/O warning is issued.
            </summary>
        </member>
        <member name="E:MKY.IO.Serial.IIOProvider.IOError">
            <summary>
            Event raised after an I/O error has occurred.
            </summary>
        </member>
        <member name="E:MKY.IO.Serial.IIOProvider.DataReceived">
             <summary>
             Event raised after the I/O provider has received data.
             </summary>
             <remarks>
             Opposed to the interface of <see cref="T:System.IO.Ports.SerialPort"/>, i.e. a method
             must be called to send and receive data, and the corresponding events do not contain
             any data, this event is implemented with data. There are several reasons for this:
              > Events with data are easier to use.
              > Events with data ensure that multiple recipients, i.e. event sinks, can use it.
              > Events with data can implemented in a way to prevent race conditions on handling.
            
             Receive related code is located before send related code since I/O is a common term
             where I comes before O.
             </remarks>
        </member>
        <member name="E:MKY.IO.Serial.IIOProvider.DataSent">
            <summary>
            Event raised after the I/O provider has sent data.
            </summary>
            <remarks>
            Send related code is located after receive related code since I/O is a common term
            where I comes before O.
            </remarks>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.IsStopped">
            <summary>
            Gets a value indicating whether the I/O provider has been stopped.
            </summary>
            <returns>
            <c>true</c> if the I/O provider has been stopped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.IsStarted">
            <summary>
            Gets a value indicating whether the I/O provider has been started.
            </summary>
            <returns>
            <c>true</c> if the I/O provider has been started; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.IsConnected">
            <summary>
            Gets a value indicating whether the I/O provider is started and the underlying I/O
            instance is open and/or connected to a remote resource.
            </summary>
            <remarks><list type="bullet">
            <item><term>Serial COM Ports:</term><description>
            This property indicates that the port is open and no break state is detected.
            The latter may not be supported by the I/O instance or driver.
            </description></item>
            <item><term>UDP/IP Sockets:</term><description>
            This property indicates that the socket is open.
            </description></item>
            <item><term>USB Ser/HID Devices:</term><description>
            This property indicates that the device is physically connected.
            </description></item>
            </list></remarks>
            <returns>
            <c>true</c> if the I/O provider is started and the underlying I/O instance is open and/or
            connected to a remote resource as of the most recent operation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.IsOpen">
            <summary>
            Gets a value indicating whether the I/O provider is started and the underlying I/O
            instance is open.
            </summary>
            <remarks><list type="bullet">
            <item><term>TCP/IP Sockets:</term><description>
            This property indicates that the underlying I/O instance is connected to a remote resource.
            </description></item>
            </list></remarks>
            <returns>
            <c>true</c> if the I/O provider is started and the underlying I/O instance is open as of
            the most recent operation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.IsTransmissive">
            <summary>
            Gets a value indicating whether the I/O provider is started and the underlying I/O
            instance is transmissive, i.e. ready to send and receive data.
            </summary>
            <remarks>
            This property has been added since the meaning of <see cref="P:MKY.IO.Serial.IIOProvider.IsConnected"/> and
            <see cref="P:MKY.IO.Serial.IIOProvider.IsOpen"/> differ depending on the underlying I/O instance.
            </remarks>
            <remarks>
            Additional 'IsReadyToSend' and 'IsReadyToReceive' could further refine the interface.
            </remarks>
            <returns>
            <c>true</c> if the I/O provider is started and the underlying I/O instance is
            transmissive, i.e. ready to send and receive data as of the most recent operation;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.IsSending">
            <summary>
            Gets a value indicating whether the I/O provider and/or the underlying I/O instance
            is currently sending, about to start sending, or has pending data yet waiting to be
            sent (e.g. if flow control is active).
            </summary>
            <remarks><para>
            Named "IsSending" rather than e.g. "HasDataForSending" as it sounds more natural.
            </para><para>
            The capabilities of the underlying I/O instance differ, this property may or may not
            take the state of the underlying I/O instance into account.
            </para><para>
            Same with the the state of the underlying operating system driver and hardware. In most
            cases, their state cannot be retrieved from within a .NET implementation by common means.
            </para><list type="bullet">
            <item><term>Serial COM Ports:</term><description>
            The underlying <see cref="P:System.IO.Ports.SerialPort.BytesToWrite"/> is taken into account.
            </description></item>
            </list></remarks>
            <returns>
            <c>true</c> if the I/O provider and/or the underlying I/O instance is sending data;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MKY.IO.Serial.IIOProvider.UnderlyingIOInstance">
            <summary>
            Gets the underlying I/O instance.
            </summary>
            <remarks>
            Two methods to lock/unlock the I/O instance could be added as the underlying logic could
            change or even dispose of the instance while accessing it.
            </remarks>
            <returns>
            The I/O instance.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IIOProvider.Start">
            <summary>
            Starts the I/O provider.
            </summary>
            <remarks><list type="bullet">
            <item><term>Serial COM Ports:</term><description>
            The port gets opened.
            </description></item>
            <item><term>TCP/IP Sockets:</term><description>
            The socket gets created and starts connecting/listening.
            </description></item>
            <item><term>UDP/IP Sockets:</term><description>
            The socket gets opened.
            </description></item>
            <item><term>USB Ser/HID Devices:</term><description>
            The device gets created.
            </description></item>
            </list></remarks>
        </member>
        <member name="M:MKY.IO.Serial.IIOProvider.Stop">
            <summary>
            Stops the I/O provider.
            </summary>
            <remarks><list type="bullet">
            <item><term>Serial COM Ports:</term><description>
            The port gets closed.
            </description></item>
            <item><term>TCP/IP Sockets:</term><description>
            The socket gets closed.
            </description></item>
            <item><term>UDP/IP Sockets:</term><description>
            The socket gets closed.
            </description></item>
            <item><term>USB Ser/HID Devices:</term><description>
            The device gets closed.
            </description></item>
            </list></remarks>
        </member>
        <member name="M:MKY.IO.Serial.IIOProvider.Send(System.Byte[])">
            <summary>
            Sends data using the underlying I/O instance.
            </summary>
            <remarks>
            If the underlying buffer has space, this method will immediately return; otherwise
            this method will be blocking until there is space, or the I/O instance is stopped
            or gets disconnected/closed.
            </remarks>
            <param name="data">
            An array of type <see cref="T:System.Byte"/> that contains the data to be sent.
            </param>
            <returns>
            <c>true</c> if data has successfully been sent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IIOProvider.ClearSendBuffer">
            <summary>
            Clears the send buffer of the I/O provider and the underlying I/O instance.
            </summary>
            <remarks>
            The buffer of the underlying I/O instance can only be cleared if this functionality
            is provided by the underlying I/O instance.
            </remarks>
            <returns>
            The number of bytes cleared.
            </returns>
        </member>
        <member name="T:MKY.IO.Serial.IXOnXOffHelper">
            <summary></summary>
        </member>
        <member name="F:MKY.IO.Serial.IXOnXOffHelper.inputIsXOn">
            <summary>
            Input XOn/XOff reflects the XOn/XOff state of this serial port itself, i.e. this computer.
            </summary>
        </member>
        <member name="F:MKY.IO.Serial.IXOnXOffHelper.outputIsXOn">
            <summary>
            Output XOn/XOff reflects the XOn/XOff state of the communication counterpart, i.e. a device.
            </summary>
        </member>
        <member name="F:MKY.IO.Serial.IXOnXOffHelper.manualInputWasXOn">
            <remarks>
            In case of manual XOn/XOff, input is initialized to XOn.
            </remarks>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.InputIsXOn">
            <summary>
            Gets the input XOn/XOff state.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.OutputIsXOn">
            <summary>
            Gets or sets the output XOn/XOff state.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.ManualInputWasXOn">
            <summary>
            Gets the manual input XOn/XOff state.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.SentXOnCount">
            <summary>
            Returns the number of sent XOn bytes, i.e. the count of input XOn/XOff signaling.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.SentXOffCount">
            <summary>
            Returns the number of sent XOff bytes, i.e. the count of input XOn/XOff signaling.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.ReceivedXOnCount">
            <summary>
            Returns the number of received XOn bytes, i.e. the count of output XOn/XOff signaling.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHelper.ReceivedXOffCount">
            <summary>
            Returns the number of received XOff bytes, i.e. the count of output XOn/XOff signaling.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.XOnOrXOffSent(System.Byte)">
            <summary>
            Notify that an XOn or XOff byte has been sent.
            </summary>
            <returns>
            Returns <c>true</c> if XOn/XOff state has changed, <c>false</c> if state remains.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.XOnSent">
            <summary>
            Notify that an XOn byte has been sent.
            </summary>
            <returns>
            Returns <c>true</c> if XOn/XOff state has changed, <c>false</c> if state remains.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.XOffSent">
            <summary>
            Notify that an XOff byte has been sent.
            </summary>
            <returns>
            Returns <c>true</c> if XOn/XOff state has changed, <c>false</c> if state remains.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.XOnOrXOffReceived(System.Byte)">
            <summary>
            Notify that an XOn or XOff byte has been received.
            </summary>
            <returns>
            Returns <c>true</c> if XOn/XOff state has changed, <c>false</c> if state remains.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.XOnReceived">
            <summary>
            Notify that an XOn byte has been received.
            </summary>
            <returns>
            Returns <c>true</c> if XOn/XOff state has changed, <c>false</c> if state remains.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.XOffReceived">
            <summary>
            Notify that an XOff byte has been received.
            </summary>
            <returns>
            Returns <c>true</c> if XOn/XOff state has changed, <c>false</c> if state remains.
            </returns>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHelper.ResetCounts">
            <summary>
            Resets the XOn/XOff signaling count.
            </summary>
        </member>
        <member name="T:MKY.IO.Serial.IXOnXOffHandler">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.XOnXOffIsInUse">
            <summary>
            Returns <c>true</c> is XOn/XOff is in use, i.e. if one or the other kind of XOn/XOff
            flow control is active.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.InputIsXOn">
            <summary>
            Gets the input XOn/XOff state.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.OutputIsXOn">
            <summary>
            Gets the output XOn/XOff state.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHandler.SignalInputXOn">
            <summary>
            Signals the other communication endpoint that this device is in XOn state.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHandler.SignalInputXOff">
            <summary>
            Signals the other communication endpoint that this device is in XOff state.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHandler.ToggleInputXOnXOff">
            <summary>
            Toggles the input XOn/XOff state.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.SentXOnCount">
            <summary>
            Returns the number of sent XOn bytes, i.e. the count of input XOn/XOff signaling.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.SentXOffCount">
            <summary>
            Returns the number of sent XOff bytes, i.e. the count of input XOn/XOff signaling.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.ReceivedXOnCount">
            <summary>
            Returns the number of received XOn bytes, i.e. the count of output XOn/XOff signaling.
            </summary>
        </member>
        <member name="P:MKY.IO.Serial.IXOnXOffHandler.ReceivedXOffCount">
            <summary>
            Returns the number of received XOff bytes, i.e. the count of output XOn/XOff signaling.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IXOnXOffHandler.ResetXOnXOffCount">
            <summary>
            Resets the XOn/XOff signaling counts.
            </summary>
        </member>
        <member name="T:MKY.IO.Serial.XOnXOff">
            <summary></summary>
        </member>
        <member name="F:MKY.IO.Serial.XOnXOff.XOnByte">
            <summary></summary>
        </member>
        <member name="F:MKY.IO.Serial.XOnXOff.XOffByte">
            <summary></summary>
        </member>
        <member name="F:MKY.IO.Serial.XOnXOff.XOnDescription">
            <summary></summary>
        </member>
        <member name="F:MKY.IO.Serial.XOnXOff.XOffDescription">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.XOnXOff.IsXOnOrXOffByte(System.Byte)">
            <summary>
            Returns whether the given byte is an XOn or XOff byte.
            </summary>
        </member>
        <member name="T:MKY.IO.Serial.IntervalSettingTuple">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IntervalSettingTuple.Enabled">
            <summary></summary>
        </member>
        <member name="P:MKY.IO.Serial.IntervalSettingTuple.Interval">
            <summary>Interval of reconnect in milliseconds.</summary>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.#ctor(System.Boolean,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <remarks>
            Use properties instead of fields. This ensures that 'intelligent' properties,
            i.e. properties with some logic, are also properly handled.
            </remarks>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>
            Use properties instead of fields to calculate hash code. This ensures that 'intelligent'
            properties, i.e. properties with some logic, are also properly handled.
            </remarks>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.Equals(MKY.IO.Serial.IntervalSettingTuple)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
            <remarks>
            Use properties instead of fields to determine equality. This ensures that 'intelligent'
            properties, i.e. properties with some logic, are also properly handled.
            </remarks>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.op_Equality(MKY.IO.Serial.IntervalSettingTuple,MKY.IO.Serial.IntervalSettingTuple)">
            <summary>
            Determines whether the two specified objects have value equality.
            </summary>
        </member>
        <member name="M:MKY.IO.Serial.IntervalSettingTuple.op_Inequality(MKY.IO.Serial.IntervalSettingTuple,MKY.IO.Serial.IntervalSettingTuple)">
            <summary>
            Determines whether the two specified objects have value inequality.
            </summary>
        </member>
    </members>
</doc>
