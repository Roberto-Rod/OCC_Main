<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MKY.Win32</name>
    </assembly>
    <members>
        <member name="T:MKY.Win32.Constants">
            <summary>
            Encapsulates general constants of the Win32 API.
            </summary>
        </member>
        <member name="T:MKY.Win32.Constants.NativeConstants">
            <summary></summary>
        </member>
        <member name="F:MKY.Win32.Constants.NativeConstants.WAIT_TIMEOUT">
            <summary></summary>
        </member>
        <member name="F:MKY.Win32.Constants.NativeConstants.WAIT_OBJECT_0">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Console">
            <summary>
            Encapsulates parts of the Win32 debugging API.
            </summary>
        </member>
        <member name="T:MKY.Win32.Console.NativeTypes">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.AttachConsoleToProcess(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.AttachConsoleToParentProcess">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.AttachConsole(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.FreeConsoleFromProcess(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.FreeConsoleFromParentProcess">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.FreeConsole(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.GetStandardInputHandle">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.GetStandardOutputHandle">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.GetStandardErrorHandle">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.GetStdHandle(MKY.Win32.Console.NativeTypes.STD_HANDLE)">
            <summary>
            Retrieves a handle to the specified standard device (standard input, standard output, or standard error).
            </summary>
            <param name="nStdHandle">The standard device.</param>
            <returns>
            If the function succeeds, the return value is a handle to the specified device,
            or a redirected handle set by a previous call to SetStdHandle. The handle has
            GENERIC_READ and GENERIC_WRITE access rights, unless the application has used
            SetStdHandle to set a standard handle with lesser access.
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended
            error information, call <see cref="M:MKY.Win32.WinError.LastErrorToString"/>.
            If an application does not have associated standard handles, such as a service
            running on an interactive desktop, and has not redirected them, the return value
            is NULL.
            </returns>
            <remarks>
            Handles returned by GetStdHandle can be used by applications that need to read
            from or write to the console. When a console is created, the standard input handle
            is a handle to the console's input buffer, and the standard output and standard
            error handles are handles of the console's active screen buffer. These handles
            can be used by the ReadFile and WriteFile functions, or by any of the console
            functions that access the console input buffer or a screen buffer (for example,
            the ReadConsoleInput, WriteConsole, or GetConsoleScreenBufferInfo functions).
            The standard handles of a process may be redirected by a call to SetStdHandle,
            in which case GetStdHandle returns the redirected handle. If the standard handles
            have been redirected, you can specify the CONIN$ value in a call to the CreateFile
            function to get a handle to a console's input buffer. Similarly, you can specify
            the CONOUT$ value to get a handle to a console's active screen buffer.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.SetStandardInputHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.SetStandardOutputHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.SetStandardErrorHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Console.NativeMethods.SetStdHandle(MKY.Win32.Console.NativeTypes.STD_HANDLE,Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Sets the handle for the specified standard device (standard input, standard output, or standard error).
            </summary>
            <param name="nStdHandle">The standard device for which the handle is to be set.</param>
            <param name="hHandle">The handle for the standard device.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            To get extended error information, call <see cref="M:MKY.Win32.WinError.LastErrorToString"/>.
            </returns>
            <remarks>
            The standard handles of a process may have been redirected by a call to SetStdHandle,
            in which case GetStdHandle will return the redirected handle. If the standard handles
            have been redirected, you can specify the CONIN$ value in a call to the CreateFile
            function to get a handle to a console's input buffer. Similarly, you can specify the
            CONOUT$ value to get a handle to the console's active screen buffer.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Console.Attach">
            <summary>
            Attaches the input/output/error console handles to the current process.
            Useful for windows applications since they do not support the console by default.
            </summary>
        </member>
        <member name="M:MKY.Win32.Console.Detach">
            <summary>
            Detaches the input/output/error console handles from the current process.
            Useful for windows applications since they do not support the console by default.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileApi">
            <summary>
            Encapsulates parts of the Win32 API relating to the file API.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileApi.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.FileApi.NativeTypes.FileType">
            <summary>
            Encapsulates Win32 FILE_TYPE_ file access flags into a C# flag enum.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileApi.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.FileApi.NativeMethods.GetFileType_(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Retrieves the file type of the specified file.
            </summary>
            <param name="fileHandle">A handle to the file.</param>
            <returns>One of the <see cref="T:MKY.Win32.FileApi.NativeTypes.FileType"/> values.</returns>
        </member>
        <member name="T:MKY.Win32.DotNet.SerialPortPatcher">
             <summary>
             Implements a workaround to the <see cref="T:System.IO.IOException"/> issue in <see cref="T:System.IO.Ports.SerialPort"/>
             based on http://zachsaw.blogspot.ch/2010/07/serialport-ioexception-workaround-in-c.html
             by Zach Saw.
            
             Advantages:
             Prevents the exception (lookahead) instead of handling it (lookbehind),
             the implementation of the workaround is properly encapsulated.
            
             Big disadvantage:
             Requires 'Microsoft.Win32.SafeHandles' and several Win32 APIs, thus
             introduces platform dependency.
            
             The <see cref="T:System.IO.IOException"/> issue can also be solved by actively managing the
             <see cref="P:System.IO.Ports.SerialPort.BaseStream"/>. The implementation in 'MKY.IO.Ports.SerialPort'
             uses this approach, in order to not depend upon Win32 specifics.
             </summary>
        </member>
        <member name="M:MKY.Win32.DotNet.SerialPortPatcher.ApplyTo(System.String)">
            <summary>
            Applies the fix to the given serial port.
            </summary>
        </member>
        <member name="M:MKY.Win32.DotNet.SerialPortPatcher.Dispose(System.Boolean)">
            <param name="disposing">
            <c>true</c> when called from <see cref="M:MKY.Win32.DotNet.SerialPortPatcher.Dispose(System.Boolean)"/>,
            <c>false</c> when called from finalizer.
            </param>
        </member>
        <member name="T:MKY.Win32.User">
            <summary>
            Encapsulates parts of the Win32 API related to window management.
            </summary>
        </member>
        <member name="T:MKY.Win32.User.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.User.NativeTypes.LASTINPUTINFO">
            <remarks>winuser.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.User.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.User.NativeMethods.GetLastInputInfo(MKY.Win32.User.NativeTypes.LASTINPUTINFO@)">
            <summary>
            Retrieves the time of the last input event..
            </summary>
            <param name="plii">
            A pointer to a LASTINPUTINFO structure that receives the time of the last input event.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="P:MKY.Win32.User.IdleTime">
            <summary>
            Uses the <see cref="M:MKY.Win32.User.NativeMethods.GetLastInputInfo(MKY.Win32.User.NativeTypes.LASTINPUTINFO@)"/> API function to retrieve the last
            user input and calculates the corresponding idle time.
            </summary>
            <returns>The idle time.</returns>
        </member>
        <member name="T:MKY.Win32.Window">
            <summary>
            Encapsulates parts of the Win32 API related to window management.
            </summary>
        </member>
        <member name="T:MKY.Win32.Window.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Window.NativeTypes.SCROLLINFO">
            <remarks>winuser.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.Window.NativeTypes.RECT">
            <remarks>windef.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.Window.NativeConstants">
            <remarks>winuser.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.Window.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Window.NativeMethods.GetScrollInfo(System.IntPtr,System.Int32,MKY.Win32.Window.NativeTypes.SCROLLINFO@)">
            <summary>
            The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum
            and maximum scrolling positions, the page size, and the position of the scroll box (thumb).
            </summary>
            <param name="hwnd">
            Handle to a scroll bar control or a window with a standard scroll bar, depending on the
            value of the <paramref name="fnBar"/> parameter.
            </param>
            <param name="fnBar">
            Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values:
            - <see cref="F:MKY.Win32.Window.NativeConstants.SB_CTL"/>  Retrieves the parameters for a scroll bar control. The <paramref name="hwnd"/> parameter must be the handle to the scroll bar control.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SB_HORZ"/> Retrieves the parameters for the window's standard horizontal scroll bar.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SB_VERT"/> Retrieves the parameters for the window's standard vertical scroll bar.
            </param>
            <param name="lpsi">
            Pointer to a <see cref="T:MKY.Win32.Window.NativeTypes.SCROLLINFO"/> structure. Before calling GetScrollInfo,
            set the cbSize member to sizeof(SCROLLINFO), and set the fMask member to specify the scroll
            bar parameters to retrieve. Before returning, the function copies the specified parameters
            to the appropriate members of the structure.
            The fMask member can be one or more of the following values:
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_PAGE"/>     Copies the scroll page to the nPage member of the SCROLLINFO structure pointed to by lpsi.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_POS"/>      Copies the scroll position to the nPos member of the SCROLLINFO structure pointed to by lpsi.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_RANGE"/>    Copies the scroll range to the nMin and nMax members of the SCROLLINFO structure pointed to by lpsi.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_TRACKPOS"/> Copies the current scroll box tracking position to the nTrackPos member of the SCROLLINFO structure pointed to by lpsi.
            </param>
            <returns>
            If the function retrieved any values, the return value is nonzero.
            If the function does not retrieve any values, the return value is zero.
            To get extended error information, call <see cref="M:MKY.Win32.WinError.GetLastErrorCode"/>.
            </returns>
        </member>
        <member name="M:MKY.Win32.Window.NativeMethods.SetScrollInfo(System.IntPtr,System.Int32,MKY.Win32.Window.NativeTypes.SCROLLINFO@,System.Boolean)">
            <summary>
            The SetScrollInfo function sets the parameters of a scroll bar, including the minimum
            and maximum scrolling positions, the page size, and the position of the scroll box (thumb).
            The function also redraws the scroll bar, if requested.
            </summary>
            <param name="hwnd">
            Handle to a scroll bar control or a window with a standard scroll bar, depending on the
            value of the <paramref name="fnBar"/> parameter.
            </param>
            <param name="fnBar">
            Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values:
            - <see cref="F:MKY.Win32.Window.NativeConstants.SB_CTL"/>  Retrieves the parameters for a scroll bar control. The <paramref name="hwnd"/> parameter must be the handle to the scroll bar control.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SB_HORZ"/> Retrieves the parameters for the window's standard horizontal scroll bar.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SB_VERT"/> Retrieves the parameters for the window's standard vertical scroll bar.
            </param>
            <param name="lpsi">
            Pointer to a <see cref="T:MKY.Win32.Window.NativeTypes.SCROLLINFO"/> structure. Before calling GetScrollInfo,
            set the cbSize member to sizeof(SCROLLINFO), and set the fMask member to specify the scroll
            bar parameters to retrieve. Before returning, the function copies the specified parameters
            to the appropriate members of the structure.
            The fMask member can be one or more of the following values:
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_DISABLENOSCROLL"/> Disables the scroll bar instead of removing it, if the scroll bar's new parameters make the scroll bar unnecessary.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_PAGE"/>  Sets the scroll page to the value specified in the nPage member of the SCROLLINFO structure pointed to by lpsi.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_POS"/>   Sets the scroll position to the value specified in the nPos member of the SCROLLINFO structure pointed to by lpsi.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SIF_RANGE"/> Sets the scroll range to the value specified in the nMin and nMax members of the SCROLLINFO structure pointed to by lpsi.
            </param>
            <param name="fRedraw">
            Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If this parameter is <c>true</c>, the scroll bar is redrawn, otherwise, it is not redrawn.
            </param>
            <returns>
            The return value is the current position of the scroll box.
            </returns>
        </member>
        <member name="M:MKY.Win32.Window.NativeMethods.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,MKY.Win32.Window.NativeTypes.RECT@,MKY.Win32.Window.NativeTypes.RECT@,System.IntPtr,MKY.Win32.Window.NativeTypes.RECT@,System.UInt32)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hwnd">Handle to the window where the client area is to be scrolled.</param>
            <param name="dx">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="dy">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up.
            </param>
            <param name="prcScroll">
            Pointer to a RECT structure that specifies the portion of the client area to be scrolled.
            If this parameter is <c>null</c>, the entire client area is scrolled.
            </param>
            <param name="prcClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected. Bits scrolled from the
            outside of the rectangle to the inside are painted; bits scrolled from the inside of
            the rectangle to the outside are not painted. This parameter may be <c>null</c>.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be <c>null</c>.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated
            by scrolling. This parameter may be <c>null</c>.
            </param>
            <param name="flags">
            Specifies flags that control scrolling. This parameter can be a combination of the
            following values:
            - <see cref="F:MKY.Win32.Window.NativeConstants.SW_ERASE"/>          Erases the newly invalidated region by sending a WM_ERASEBKGND message to the window when specified with the SW_INVALIDATE flag.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SW_INVALIDATE"/>     Invalidates the region identified by the hrgnUpdate parameter after scrolling.
            - <see cref="F:MKY.Win32.Window.NativeConstants.SW_SCROLLCHILDREN"/> Scrolls all child windows that intersect the rectangle pointed to by the prcScroll parameter. The child windows are scrolled by the number of pixels specified by the dx and dy parameters. The system sends a WM_MOVE message to all child windows that intersect the prcScroll rectangle, even if they do not move.
            </param>
            <returns>
            If the function succeeds, the return value is SIMPLEREGION (rectangular invalidated
            region), COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
            or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR. To get extended error information,
            call <see cref="M:MKY.Win32.WinError.LastErrorToString"/>.
            </returns>
        </member>
        <member name="T:MKY.Win32.WinBase">
            <summary>
            Encapsulates parts of the Win32 error API.
            </summary>
        </member>
        <member name="T:MKY.Win32.WinBase.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.WinBase.NativeTypes.COMSTATFlags">
            <summary>
            Flags bit field for the <see cref="T:MKY.Win32.WinBase.NativeTypes.COMSTAT"/> structure.
            </summary>
        </member>
        <member name="T:MKY.Win32.WinBase.NativeTypes.COMSTAT">
            <summary>
            Contains information about a communications device.
            This structure is filled by the <see cref="M:MKY.Win32.WinBase.NativeMethods.ClearCommError(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@,MKY.Win32.WinBase.NativeTypes.COMSTAT@)"/> function.
            </summary>
        </member>
        <member name="T:MKY.Win32.WinBase.NativeTypes.DCBFlags">
            <summary>
            Flags bit field for the <see cref="T:MKY.Win32.WinBase.NativeTypes.DCB"/> structure.
            </summary>
        </member>
        <member name="T:MKY.Win32.WinBase.NativeTypes.DCB">
            <summary>
            Defines the control setting for a serial communications device.
            </summary>
        </member>
        <member name="M:MKY.Win32.WinBase.NativeMethods.GetCommState(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.WinBase.NativeTypes.DCB@)">
            <summary>
            Retrieves the current control settings for a specified communications device.
            </summary>
        </member>
        <member name="M:MKY.Win32.WinBase.NativeMethods.SetCommState(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.WinBase.NativeTypes.DCB@)">
            <summary>
            Configures a communications device according to the specifications in a device-control block (a <see cref="T:MKY.Win32.WinBase.NativeTypes.DCB"/> structure).
            The function reinitializes all hardware and control settings, but it does not empty output or input queues.
            </summary>
        </member>
        <member name="M:MKY.Win32.WinBase.NativeMethods.ClearCommError(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@,MKY.Win32.WinBase.NativeTypes.COMSTAT@)">
            <summary>
            Retrieves information about a communications error and reports the current status of a communications device.
            The function is called when a communications error occurs, and it clears the device's error flag to enable additional input and output (I/O) operations.
            </summary>
        </member>
        <member name="M:MKY.Win32.WinBase.GetCommState(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.WinBase.NativeTypes.DCB@)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.WinBase.SetCommState(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.WinBase.NativeTypes.DCB@)">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.WinError">
            <summary>
            Encapsulates parts of the Win32 error API.
            </summary>
            <remarks>
            Intentionally called "WinError" instead of "Error" to prevent code analysis error due to
            "Error" keyword in certain .NET languages (e.g. Visual Basic).
            </remarks>
        </member>
        <member name="F:MKY.Win32.WinError.Success">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.WinError.GetLastErrorCode">
            <summary>
            Get code that describes the error of an API call.
            </summary>
            <returns>The resulting code.</returns>
        </member>
        <member name="M:MKY.Win32.WinError.GetLastErrorMessage">
            <summary>
            Get message that describes the error of an API call.
            </summary>
            <returns>The resulting message.</returns>
        </member>
        <member name="M:MKY.Win32.WinError.GetErrorMessage(System.Int32)">
            <summary>
            Get message that describes the error of an API call.
            </summary>
            <returns>The resulting message.</returns>
        </member>
        <member name="M:MKY.Win32.WinError.LastErrorToString">
            <summary>
            Get string that describes the error of an API call.
            </summary>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:MKY.Win32.WinError.LastErrorToIOException">
            <summary>
            Get exception object that describes the error of an API call.
            </summary>
        </member>
        <member name="T:MKY.Win32.DeviceManagement">
            <summary>
            Encapsulates parts of the Win32 API related to device management
            (SetupDi___ and RegisterDeviceNotification functions).
            </summary>
            <remarks>
            This class is partly based on GenericHid of Jan Axelson's Lakeview Research.
            Visit GenericHid on http://www.lvr.com/hidpage.htm for details.
            This class needed to modify the original structure and contents of GenericHid
            due to the following reasons:
            - Suboptimal structure of the original GenericHid project
            - Missing features required for YAT
            - Potential reuse of this class for other services directly using the Win32 API
            DeviceManagement and Hid types and methods have been split into separate classes.
            </remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeTypes.DIGCF">
            <remarks>dbt.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="F:MKY.Win32.DeviceManagement.NativeTypes.DIGCF.DEFAULT">
            <remarks>
            Only valid with DIGCF_DEVICEINTERFACE.
            </remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeTypes.DBT">
            <remarks>dbt.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeTypes.DBT_DEVTYP">
            <remarks>dbt.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeTypes.DEV_BROADCAST_DEVICEINTERFACE">
            <summary>
            Two declarations for the DEV_BROADCAST_DEVICEINTERFACE structure.
            Use this one in the call to RegisterDeviceNotification() and
            in checking dbch_devicetype in a DEV_BROADCAST_HDR structure.
            </summary>
            <remarks>
            Must be a class because <see cref="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)"/> and
            <see cref="M:MKY.Win32.DeviceManagement.NativeMethods.RegisterDeviceNotification(System.IntPtr,MKY.Win32.DeviceManagement.NativeTypes.DEV_BROADCAST_DEVICEINTERFACE,MKY.Win32.DeviceManagement.NativeTypes.DEVICE_NOTIFY)"/> require a reference type.
            </remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeTypes.DEV_BROADCAST_HDR">
            <remarks>
            Must be a class because <see cref="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)"/> requires a reference type.
            </remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeConstants">
            <summary></summary>
        </member>
        <member name="F:MKY.Win32.DeviceManagement.NativeConstants.WM_DEVICECHANGE">
            <remarks>dbt.h and saying hello to StyleCop ;-.</remarks>
        </member>
        <member name="T:MKY.Win32.DeviceManagement.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.RegisterDeviceNotification(System.IntPtr,MKY.Win32.DeviceManagement.NativeTypes.DEV_BROADCAST_DEVICEINTERFACE,MKY.Win32.DeviceManagement.NativeTypes.DEVICE_NOTIFY)">
            <summary>
            Request to receive notification messages when a device in an interface class is attached
            or removed.
            </summary>
            <param name="hRecipient">Handle to the window that will receive device events.</param>
            <param name="NotificationFilter">Pointer to a DEV_BROADCAST_DEVICEINTERFACE to specify
            the type of device to send notifications for.</param>
            <param name="Flags">DEVICE_NOTIFY_WINDOW_HANDLE indicates the handle is a window handle.</param>
            <returns>Device notification handle or NULL on failure.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.SetupDiCreateDeviceInfoList(System.Guid@,System.IntPtr)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.SetupDiDestroyDeviceInfoList(System.IntPtr)">
            <summary>
            Frees the memory reserved for the DeviceInfoSet returned by SetupDiGetClassDevs.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.SetupDiEnumDeviceInterfaces(System.IntPtr,System.IntPtr,System.Guid@,System.Int32,MKY.Win32.DeviceManagement.NativeTypes.SP_DEVICE_INTERFACE_DATA@)">
            <summary>
            Retrieves a handle to a SP_DEVICE_INTERFACE_DATA structure for a device.
            On return, DeviceInterfaceData contains the handle to a SP_DEVICE_INTERFACE_DATA structure for a detected device.
            </summary>
            <param name="DeviceInfoSet">DeviceInfoSet returned by SetupDiGetClassDevs.</param>
            <param name="DeviceInfoData">Optional SP_DEVINFO_DATA structure that defines a device
            instance that is a member of a device information set.</param>
            <param name="InterfaceClassGuid">Device interface GUID.</param>
            <param name="MemberIndex">Index to specify a device in a device information set.</param>
            <param name="DeviceInterfaceData">Pointer to a handle to a SP_DEVICE_INTERFACE_DATA structure for a device.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.SetupDiGetClassDevs(System.Guid@,System.IntPtr,System.IntPtr,MKY.Win32.DeviceManagement.NativeTypes.DIGCF)">
            <summary>
            Retrieves a device information set for a specified group of devices.
            SetupDiEnumDeviceInterfaces uses the device information set.
            </summary>
            <param name="ClassGuid">Interface class GUID.</param>
            <param name="Enumerator">Null to retrieve information for all device instances.</param>
            <param name="hwndParent">Optional handle to a top-level window (unused here).</param>
            <param name="Flags">Flags to limit the returned information to currently present devices
            and devices that expose interfaces in the class specified by the GUID.</param>
            <returns>Handle to a device information set for the devices.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.SetupDiGetDeviceInterfaceDetail(System.IntPtr,MKY.Win32.DeviceManagement.NativeTypes.SP_DEVICE_INTERFACE_DATA@,System.IntPtr,System.Int32,System.Int32@,System.IntPtr)">
            <summary>
            Retrieves an SP_DEVICE_INTERFACE_DETAIL_DATA structure containing information about a device.
            To retrieve the information, call this function twice. The first time returns the size of the structure.
            The second time returns a pointer to the data.
            </summary>
            <param name="DeviceInfoSet">DeviceInfoSet returned by SetupDiGetClassDevs.</param>
            <param name="DeviceInterfaceData">SP_DEVICE_INTERFACE_DATA structure returned by SetupDiEnumDeviceInterfaces.</param>
            <param name="DeviceInterfaceDetailData">A returned pointer to an SP_DEVICE_INTERFACE_DETAIL_DATA.
            Structure to receive information about the specified interface.</param>
            <param name="DeviceInterfaceDetailDataSize">The size of the SP_DEVICE_INTERFACE_DETAIL_DATA structure.</param>
            <param name="RequiredSize">Pointer to a variable that will receive the returned required size of the
            SP_DEVICE_INTERFACE_DETAIL_DATA structure.</param>
            <param name="DeviceInfoData">Returned pointer to an SP_DEVINFO_DATA structure to receive information about the device.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.NativeMethods.UnregisterDeviceNotification(System.IntPtr)">
            <summary>
            Stop receiving notification messages.
            </summary>
            <param name="Handle">Handle returned previously by RegisterDeviceNotification.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.GetDevicesFromGuid(System.Guid)">
            <summary>
            Use SetupDi API functions to retrieve the device path names of attached devices that
            belong to a device interface class.
            </summary>
            <param name="classGuid">An interface class GUID.</param>
            <returns>An array containing the path names of the devices currently available on the system.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.RegisterDeviceNotificationHandle(System.IntPtr,System.Guid,System.IntPtr@)">
            <summary>
            Requests to receive a notification when a device is attached or removed.
            </summary>
            <param name="windowHandle">Handle to the window that will receive device events.</param>
            <param name="classGuid">Device interface GUID.</param>
            <param name="deviceNotificationHandle">Returned device notification handle.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.UnregisterDeviceNotificationHandle(System.IntPtr)">
            <summary>
            Requests to stop receiving notification messages when a device in an interface class
            is attached or removed.
            </summary>
            <param name="deviceNotificationHandle">Handle returned previously by RegisterDeviceNotification.</param>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.DeviceChangeMessageToDevicePath(System.Windows.Forms.Message,System.String@)">
            <summary>
            Converts a device change message the a device path. Used to find out if
            the device name of a recently attached or removed device matches the name
            of a device the application is communicating with.
            </summary>
            <param name="deviceChangeMessage">
            A WM_DEVICECHANGE message. A call to RegisterDeviceNotification causes
            WM_DEVICECHANGE messages to be passed to an OnDeviceChange routine.
            </param>
            <param name="devicePath">
            A device pathname returned by SetupDiGetDeviceInterfaceDetail in an
            SP_DEVICE_INTERFACE_DETAIL_DATA structure.
            </param>
            <returns>True if the conversion succeeded, False if not.</returns>
        </member>
        <member name="M:MKY.Win32.DeviceManagement.CompareDeviceChangeMessageToDevicePath(System.Windows.Forms.Message,System.String)">
            <summary>
            Compares two device path names. Used to find out if the device name of a recently
            attached or removed device matches the name of a device the application is
            communicating with.
            </summary>
            <param name="deviceChangeMessage">
            A WM_DEVICECHANGE message. A call to RegisterDeviceNotification causes
            WM_DEVICECHANGE messages to be passed to an OnDeviceChange routine.
            </param>
            <param name="devicePath">
            A device pathname returned by SetupDiGetDeviceInterfaceDetail in an
            SP_DEVICE_INTERFACE_DETAIL_DATA structure.
            </param>
            <returns>True if the names match, False if not.</returns>
        </member>
        <member name="T:MKY.Win32.FileIO">
            <summary>
            Encapsulates parts of the Win32 API relating to file I/O.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeTypes.Access">
            <summary>
            Encapsulates Win32 GENERIC_ file access flags into a C# flag enum.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeTypes.ShareMode">
            <summary>
            Encapsulates Win32 FILE_SHARE_ file share mode flags into a C# flag enum.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeTypes.CreationDisposition">
            <summary>
            Replicates Win32 creation disposition selectors into a C# enum.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeTypes.AttributesAndFlags">
            <summary>
            Encapsulates Win32 FILE_ATTRIBUTE_ and FILE_FLAG_ values into a C# flag enum.
            </summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeTypes.SECURITY_ATTRIBUTES">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.FileIO.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.CancelIo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Cancels a call to ReadFile.
            </summary>
            <param name="hFile">The device handle.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.CreateEvent(System.IntPtr,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an event object for the overlapped structure used with ReadFile.
            </summary>
            <param name="SecurityAttributes">A security attributes structure or <see cref="F:System.IntPtr.Zero"/>.</param>
            <param name="bManualReset">Manual Reset = False (The system automatically resets the
            state to non-signaled after a waiting thread has been released.).</param>
            <param name="bInitialState">Initial state = False (Not signaled.).</param>
            <param name="lpName">An event object name (optional).</param>
            <returns>A handle to the event object.</returns>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.CreateFile(System.String,MKY.Win32.FileIO.NativeTypes.Access,MKY.Win32.FileIO.NativeTypes.ShareMode,System.IntPtr,MKY.Win32.FileIO.NativeTypes.CreationDisposition,MKY.Win32.FileIO.NativeTypes.AttributesAndFlags,System.IntPtr)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.FileIO.NativeTypes.BY_HANDLE_FILE_INFORMATION@)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.GetOverlappedResult(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.Int32@,System.Boolean)">
            <summary>
            Gets the result of an overlapped operation.
            </summary>
            <remarks>
            Not named "TryGet..." for maching the underlying Win32 function name.
            </remarks>
            <param name="hFile">A device handle returned by CreateFile.</param>
            <param name="lpOverlapped">A pointer to an overlapped structure.</param>
            <param name="lpNumberOfBytesTransferred">A pointer to a variable to hold the number of bytes read.</param>
            <param name="bWait">False to return immediately.</param>
            <returns>Non-zero on success and the number of bytes read.</returns>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.Int32,System.Int32@,System.Threading.NativeOverlapped@)">
            <summary>
            Attempts to read an Input report from the device.
            </summary>
            <remarks>
            The overlapped call returns immediately, even if the data hasn't been received yet.
            To read multiple reports with one ReadFile, increase the size of ReadBuffer and use
            NumberOfBytesRead to determine how many reports were returned. Use a larger buffer
            if the application can't keep up with reading each report individually.
            </remarks>
            <param name="hFile">A device handle returned by CreateFile
            (for overlapped I/O, CreateFile must have been called with FILE_FLAG_OVERLAPPED).</param>
            <param name="lpBuffer">A pointer to a buffer for storing the report.</param>
            <param name="nNumberOfBytesToRead">The Input report length in bytes returned by HidP_GetCaps.</param>
            <param name="lpNumberOfBytesRead">A pointer to a variable that will hold the number of bytes read.</param>
            <param name="lpOverlapped">An overlapped structure whose hEvent member is set to an event object.</param>
            <returns>The report in ReadBuffer.</returns>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.WaitForSingleObject(System.IntPtr,System.UInt32)">
            <summary>
            Waits for at least one report or a timeout.
            Used with overlapped ReadFile.
            </summary>
            <param name="hHandle">An event object created with CreateEvent.</param>
            <param name="dwMilliseconds">A timeout value in milliseconds.</param>
            <returns>A result code.</returns>
        </member>
        <member name="M:MKY.Win32.FileIO.NativeMethods.WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[],System.Int32@,System.Threading.NativeOverlapped@)">
            <summary>
            Writes an Output report to the device.
            </summary>
            <param name="hFile">A handle returned by CreateFile.</param>
            <param name="lpBuffer">A pointer to a buffer containing the report.</param>
            <param name="lpNumberOfBytesWritten">An integer to hold the number of bytes written.</param>
            <param name="lpOverlapped">An overlapped structure whose hEvent member is set to an event object.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="T:MKY.Win32.Handle">
            <summary>
            Encapsulates parts of the Win32 API relating to handles.
            </summary>
        </member>
        <member name="T:MKY.Win32.Handle.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Handle.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Handle.NativeMethods.CloseHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Handle.NativeMethods.DuplicateHandle(System.IntPtr,Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,Microsoft.Win32.SafeHandles.SafeFileHandle@,System.UInt32,System.Boolean,MKY.Win32.Handle.NativeTypes.Options)">
            <summary>
            Duplicates an object handle.
            </summary>
            <param name="hSourceProcessHandle">A handle to the process with the handle to
            be duplicated. The handle must have the PROCESS_DUP_HANDLE access right.
            For more information, see Process Security and Access Rights.</param>
            <param name="hSourceHandle">The handle to be duplicated. This is an open object
            handle that is valid in the context of the source process. For a list of objects
            whose handles can be duplicated, see the following Remarks section.</param>
            <param name="hTargetProcessHandle">A handle to the process that is to receive
            the duplicated handle. The handle must have the PROCESS_DUP_HANDLE access right.</param>
            <param name="lpTargetHandle">A pointer to a variable that receives the duplicate
            handle. This handle value is valid in the context of the target process.
            If hSourceHandle is a pseudo handle returned by GetCurrentProcess or GetCurrentThread,
            DuplicateHandle converts it to a real handle to a process or thread, respectively.
            If lpTargetHandle is NULL, the function duplicates the handle, but does not return
            the duplicate handle value to the caller. This behavior exists only for backward
            compatibility with previous versions of this function. You should not use this
            feature, as you will lose system resources until the target process terminates.</param>
            <param name="dwDesiredAccess">The access requested for the new handle. For the
            flags that can be specified for each object type, see the following Remarks section.
            This parameter is ignored if the dwOptions parameter specifies the
            DUPLICATE_SAME_ACCESS flag. Otherwise, the flags that can be specified depend
            on the type of object whose handle is to be duplicated.</param>
            <param name="bInheritHandle">A variable that indicates whether the handle is
            inheritable. If TRUE, the duplicate handle can be inherited by new processes
            created by the target process. If FALSE, the new handle cannot be inherited.</param>
            <param name="dwOptions">Optional actions. This parameter can be zero, or any
            combination of the values.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            To get extended error information, call <see cref="M:MKY.Win32.WinError.LastErrorToString"/>.
            </returns>
        </member>
        <member name="T:MKY.Win32.Hid">
            <summary>
            Encapsulates parts of the Win32 API for HID communications.
            </summary>
            <remarks>
            This class is partly based on GenericHid of Jan Axelson's Lakeview Research.
            Visit GenericHid on http://www.lvr.com/hidpage.htm for details.
            This class needed to modify the original structure and contents of GenericHid
            due to the following reasons:
            - Suboptimal structure of the original GenericHid project
            - Missing features required for YAT
            - Potential reuse of this class for other services directly using the Win32 API
            DeviceManagement and Hid types and methods have been split into separate classes.
            </remarks>
        </member>
        <member name="T:MKY.Win32.Hid.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Hid.NativeTypes.HIDD_ATTRIBUTES">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Hid.NativeTypes.HIDP_CAPS">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Hid.NativeTypes.HIDP_REPORT_TYPE">
            <summary>
            The HIDP_REPORT_TYPE enumeration type is used to specify a HID report type.
            </summary>
        </member>
        <member name="T:MKY.Win32.Hid.NativeTypes.HIDP_STATUS">
            <summary>
            The HIDP_STATUS enumeration type is used to specify a HID report type.
            </summary>
        </member>
        <member name="T:MKY.Win32.Hid.NativeTypes.HIDP_VALUE_CAPS">
            <summary>
            If IsRange is false, UsageMin is the Usage and UsageMax is unused.
            If IsStringRange is false, StringMin is the String index and StringMax is unused.
            If IsDesignatorRange is false, DesignatorMin is the designator index and DesignatorMax is unused.
            </summary>
        </member>
        <member name="T:MKY.Win32.Hid.NativeMethods">
            <summary></summary>
        </member>
        <member name="F:MKY.Win32.Hid.NativeMethods.SafeStringDescriptorBufferLength">
             <summary>
             Safe buffer length for retrieving descriptor string via native Win32 API.
             </summary>
             <remarks>
             2 x <see cref="F:MKY.Usb.Descriptors.MaxStringDescriptorCharLength"/> + 2 x '\0' would
             result in 254;
             2 x <see cref="F:MKY.Usb.Descriptors.MaxStringDescriptorCharLength"/> + 1 x '\0' would
             result in 253.
             However, a buffer length of 254 or 253 may lead to weird results like:
              > HID language IDs string is "WindowsForms10.STATIC.app.0.3ee13a2"
              > HID content string is "SysTabControl32"
              > HID content string is "file"
             And in case of wireless Microsoft keyboards, such buffer lengths will result in "".
             https://www.pinvoke.net/default.aspx/hid.HidD_GetManufacturerString as well as
             https://www.pinvoke.net/default.aspx/hid.HidD_GetSerialNumberString propose a buffer
             of 128 bytes. While this conflicts with the USB specification (the maximum string
             length is 126 wide characters (not including the terminating NULL character)) only
             that value properly works!
            
             Saying hello to StyleCop ;-.
             </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_FlushQueue(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Removes any Input reports waiting in the buffer.
            </summary>
            <remarks>
            Public via <see cref="M:MKY.Win32.Hid.FlushQueue(Microsoft.Win32.SafeHandles.SafeFileHandle)"/>.
            </remarks>
            <param name="HidDeviceObject">A handle to the device.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_FreePreparsedData(System.IntPtr)">
            <summary>
            Frees the buffer reserved by <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)"/>.
            </summary>
            <param name="PreparsedData">A pointer to the pre-parsed data structure returned by <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)"/>.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.Hid.NativeTypes.HIDD_ATTRIBUTES@)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetFeature(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary>
            Attempts to read a Feature report from the device.
            </summary>
            <param name="HidDeviceObject">A handle to an HID.</param>
            <param name="ReportBuffer">A pointer to a buffer containing the report ID and report.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetHidGuid(System.Guid@)">
            <remarks>
            Public via <see cref="M:MKY.Win32.Hid.GetHidGuid"/>.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetIndexedString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32,System.String@)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetInputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary>
            Attempts to read an Input report from the device using a control transfer.
            </summary>
            <remarks>
            Supported under Windows XP and later only. Also applies to <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_SetOutputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            Public via <see cref="M:MKY.Win32.Hid.TryGetInputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            </remarks>
            <param name="HidDeviceObject">A handle to an HID.</param>
            <param name="ReportBuffer">A pointer to a buffer containing the report ID and report.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetManufacturerString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String@)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetNumInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@)">
            <summary>
            Retrieves the number of input reports the host can store.
            </summary>
            <remarks>
            Not supported by Windows 98 Standard Edition.
            If the buffer is full and another report arrives, the host drops the oldest report.
            Public via <see cref="M:MKY.Win32.Hid.TryGetNumberOfInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32@)"/>.
            </remarks>
            <param name="HidDeviceObject">A handle to a device and an integer to hold the number of buffers.</param>
            <param name="NumberBuffers"><c>true</c> on success, <c>false</c> on failure.</param>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetPhysicalDescriptor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)">
            <summary>
            Retrieves a pointer to a buffer containing information about the device's capabilities.
            HidP_GetCaps and other API functions require a pointer to the buffer.
            </summary>
            <param name="HidDeviceObject">A handle returned by CreateFile.</param>
            <param name="PreparsedData">A pointer to a buffer.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetProductString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String@)">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_GetSerialString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String@)">
             <remarks>
             USB specifies that serial is a string, not limited to a number!
            
             Saying hello to StyleCop ;-.
             </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_SetFeature(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary>
            Attempts to send a feature report to the device.
            </summary>
            <param name="HidDeviceObject">A handle to a HID.</param>
            <param name="ReportBuffer">A pointer to a buffer containing the report ID and report.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_SetNumInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32)">
            <summary>
            Sets the number of input reports the host can store.
            </summary>
            <remarks>
            If the buffer is full and another report arrives, the host drops the oldest report.
            Public via <see cref="M:MKY.Win32.Hid.SetNumberOfInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32)"/>.
            </remarks>
            <param name="HidDeviceObject">A handle to an HID.</param>
            <param name="NumberBuffers">An integer to hold the number of buffers.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidD_SetOutputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary>
            Attempts to send an Output report to the device using a control transfer.
            </summary>
            <remarks>
            Requires Windows XP or later. Also applies to <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetInputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            Public via <see cref="M:MKY.Win32.Hid.SetOutputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            </remarks>
            <param name="HidDeviceObject">A handle to an HID.</param>
            <param name="ReportBuffer">A pointer to a buffer containing the report ID and report.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidP_GetCaps(System.IntPtr,MKY.Win32.Hid.NativeTypes.HIDP_CAPS@)">
            <summary>
            Find out a device's capabilities. For standard devices such as joysticks, you can find
            out the specific capabilities of the device. For a custom device where the software
            knows what the device is capable of, this call may be unneeded.
            </summary>
            <param name="PreparsedData">A pointer returned by <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)"/>.</param>
            <param name="Capabilities">A pointer to a HIDP_CAPS structure.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.NativeMethods.HidP_GetValueCaps(MKY.Win32.Hid.NativeTypes.HIDP_REPORT_TYPE,MKY.Win32.Hid.NativeTypes.HIDP_VALUE_CAPS@,System.IntPtr)">
            <summary>
            Retrieves a buffer containing an array of HidP_ValueCaps structures. Each structure
            defines the capabilities of one value. This application doesn't use this data.
            </summary>
            <param name="ReportType">A report type enumerator from hidpi.h.</param>
            <param name="ValueCaps">A pointer to a buffer for the returned array.</param>
            <param name="PreparsedData"> A pointer to the pre-parsed data structure returned by <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)"/>.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="T:MKY.Win32.Hid.StringDescriptorIndex">
            <summary>
            String descriptor types.
            </summary>
            <remarks>
            Replicated in 'IO.Usb.StringDescriptorIndex' for less coupling to this assembly.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.GetHidGuid">
            <summary>
            Returns the GUID associated with USB HID.
            </summary>
        </member>
        <member name="M:MKY.Win32.Hid.CreateSharedQueryOnlyDeviceHandle(System.String,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <summary>
            Creates a device handle of the HID device at the given device path.
            </summary>
        </member>
        <member name="M:MKY.Win32.Hid.CreateSharedReadHandle(System.String,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <summary>
            Creates a device handle of the HID device at the given system path.
            </summary>
        </member>
        <member name="M:MKY.Win32.Hid.CreateSharedReadWriteHandle(System.String,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <summary>
            Creates a device handle of the HID device at the given system path.
            </summary>
        </member>
        <member name="M:MKY.Win32.Hid.GetManufacturerString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String@)">
            <remarks>
            See remarks at <see cref="M:MKY.Win32.Hid.GetString(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.Hid.GetHidStringDelegate,System.String@)"/>.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.GetProductString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String@)">
            <remarks>
            See remarks at <see cref="M:MKY.Win32.Hid.GetString(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.Hid.GetHidStringDelegate,System.String@)"/>.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.GetSerialString(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String@)">
            <remarks>
            See remarks at <see cref="M:MKY.Win32.Hid.GetString(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.Hid.GetHidStringDelegate,System.String@)"/>.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.GetString(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.Hid.GetHidStringDelegate,System.String@)">
            <summary>
            Gets one of the standard strings (manufacturer, product, serial).
            </summary>
            <remarks>
            A device may not define any or some strings (e.g. no serial string).
            Therefore, simply try to retrieve the string in best-effort manner; otherwise, return "".
            </remarks>
            <remarks>
            \fixme (2010-03-14 / MKY):
            Don't know how to retrieve culture specific strings based on language ID. Simply return "".
            Seems like HID.dll doesn't support to retrieve culture specific strings. WinUSB.dll does,
            however, WinUSB.dll can only be used in combination with devices that provide a WinUSB.dll
            based driver.
            Considerations
            - How many languages are available? Retrieve language IDs at index 0.
            - How are the indices mapped to the languages? Device descriptor returns indices for the strings.
            - How can culture specific strings be accessed? There must be something like SetDescriptor()/GetDescriptor()
              that takes an index and a text ID as argument.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.TryGetNumberOfInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32@)">
             <summary>
             Retrieves the number of input reports the host can store.
             </summary>
             <remarks>
             Windows 98 Standard Edition does not support the following:
             - Interrupt OUT transfers (WriteFile uses control transfers and Set_Report)
             - <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetNumInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@)"/> and <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_SetNumInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32)"/>
             (Not yet tested on a Windows 98 Standard Edition system.)
            
             Saying hello to StyleCop ;-.
             </remarks>
             <param name="deviceHandle">A handle to a device.</param>
             <param name="numberOfInputBuffers">An integer to hold the returned value.</param>
             <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.SetNumberOfInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32)">
             <summary>
             Sets the number of input reports the host will store.
             </summary>
             <remarks>
             Windows 98 Standard Edition does not support the following:
             - Interrupt OUT transfers (WriteFile uses control transfers and Set_Report)
             - <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_GetNumInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@)"/> and <see cref="M:MKY.Win32.Hid.NativeMethods.HidD_SetNumInputBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32)"/>
             (Not yet tested on a Windows 98 Standard Edition system.)
            
             Saying hello to StyleCop ;-.
             </remarks>
             <param name="deviceHandle">A handle to the device.</param>
             <param name="numberOfInputBuffers">The requested number of input reports.</param>
             <returns>True on success. False on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.TryGetInputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary>
            Attempts to read an Input report from the device using a control transfer.
            </summary>
            <remarks>
            Supported under Windows XP and later only. Also applies to <see cref="M:MKY.Win32.Hid.SetOutputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            Public via <see cref="M:MKY.Win32.Hid.TryGetInputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            </remarks>
            <param name="deviceHandle">A handle to an HID.</param>
            <param name="reportBuffer">A pointer to a buffer containing the report ID and report.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.SetOutputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])">
            <summary>
            Attempts to send an Output report to the device using a control transfer.
            </summary>
            <remarks>
            Requires Windows XP or later. Also applies to <see cref="M:MKY.Win32.Hid.TryGetInputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            Public via <see cref="M:MKY.Win32.Hid.SetOutputReport(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[])"/>.
            </remarks>
            <param name="deviceHandle">A handle to an HID.</param>
            <param name="reportBuffer">A pointer to a buffer containing the report ID and report.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.FlushQueue(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Remove any input reports waiting in the buffer.
            </summary>
            <param name="deviceHandle">A handle to a device.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.TryGetDeviceCapabilities(Microsoft.Win32.SafeHandles.SafeFileHandle,MKY.Win32.Hid.NativeTypes.HIDP_CAPS@)">
            <summary>
            Tries to retrieve a structure with information about a device's capabilities.
            </summary>
            <param name="deviceHandle">A handle to a device.</param>
            <param name="capabilities">An HIDP_CAPS structure.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:MKY.Win32.Hid.DebugStringAccess(System.String)">
            <remarks>
            <c>private</c> because value of <see cref="T:System.Diagnostics.ConditionalAttribute"/> is limited to file scope.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.DebugStringAccessMessageBoxes(System.String)">
            <remarks>
            <c>private</c> because value of <see cref="T:System.Diagnostics.ConditionalAttribute"/> is limited to file scope.
            </remarks>
        </member>
        <member name="M:MKY.Win32.Hid.DebugStringAccessMessageBoxes(System.Boolean,System.String,System.String)">
            <remarks>
            <c>private</c> because value of <see cref="T:System.Diagnostics.ConditionalAttribute"/> is limited to file scope.
            </remarks>
        </member>
        <member name="T:MKY.Win32.Security">
            <summary>
            Encapsulates parts of the Win32 security API.
            </summary>
        </member>
        <member name="T:MKY.Win32.Security.NativeTypes">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.Security.NativeTypes.SECURITY_IMPERSONATION_LEVEL">
            <summary></summary>
        </member>
        <member name="F:MKY.Win32.Security.NativeTypes.SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous">
            <summary>
            The server process cannot obtain identification information about the client,
            and it cannot impersonate the client.
            </summary>
            <remarks>
            It is defined with no value given, and thus, by ANSI C rules, defaults to a value of zero.
            </remarks>
        </member>
        <member name="F:MKY.Win32.Security.NativeTypes.SECURITY_IMPERSONATION_LEVEL.SecurityIdentification">
            <summary>
            The server process can obtain information about the client, such as security
            identifiers and privileges, but it cannot impersonate the client. This is useful
            for servers that export their own objects, for example, database products that
            export tables and views. Using the retrieved client-security information, the
            server can make access-validation decisions without being able to use other
            services that are using the client's security context.
            </summary>
        </member>
        <member name="F:MKY.Win32.Security.NativeTypes.SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation">
            <summary>
            The server process can impersonate the client's security context on its local
            system. The server cannot impersonate the client on remote systems.
            </summary>
        </member>
        <member name="F:MKY.Win32.Security.NativeTypes.SECURITY_IMPERSONATION_LEVEL.SecurityDelegation">
            <summary>
            The server process can impersonate the client's security context on remote systems.
            </summary>
            <remarks>
            Windows NT:  This impersonation level is not supported.
            </remarks>
        </member>
        <member name="T:MKY.Win32.Security.NativeMethods">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.Security.NativeMethods.ImpersonateSelf(MKY.Win32.Security.NativeTypes.SECURITY_IMPERSONATION_LEVEL)">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.WinUsb">
            <summary>
            Encapsulates parts of the WinUSB API.
            </summary>
            <remarks>
            The WinUSB API is only useful with devices that provide a WinUSB based driver.
            See http://download.microsoft.com/download/9/C/5/9C5B2167-8017-4BAE-9FDE-D599BAC8184A/WinUsb_HowTo.docx for details.
            </remarks>
        </member>
        <member name="T:MKY.Win32.WinUsb.NativeMethods">
            <summary></summary>
        </member>
        <member name="T:MKY.Win32.WinUsb.DescriptorType">
            <summary></summary>
        </member>
        <member name="M:MKY.Win32.WinUsb.TryGetUsbHandle(System.String,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <summary>
            Tries to retrieve the device handle of the HID device at the given system path.
            </summary>
        </member>
        <member name="M:MKY.Win32.WinUsb.InitializeInterfaceHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <summary>
            Retrieves a handle for the interface that is associated with the indicated device.
            </summary>
            <param name="deviceHandle">
            The handle to the device that CreateFile returned. WinUSB uses overlapped I/O, so
            FILE_FLAG_OVERLAPPED must be specified in the dwFlagsAndAttributes parameter of
            CreateFile call for DeviceHandle to have the characteristics necessary for
            WinUsb_Initialize to function properly.
            </param>
            <param name="interfaceHandle">
            The interface handle that WinUsb_Initialize returns. All other WinUSB routines require
            this handle as input. The handle is opaque.
            </param>
            <returns>
            TRUE if the operation succeeds. Otherwise, this routine returns FALSE, and the caller
            can retrieve the logged error by calling <see cref="M:MKY.Win32.WinError.GetLastErrorCode"/> or
            <see cref="M:MKY.Win32.WinError.GetLastErrorMessage"/>.
            </returns>
        </member>
        <member name="M:MKY.Win32.WinUsb.TryGetDeviceDescriptor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32,System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Tries to retrieve a requested device descriptor.
            </summary>
            <remarks>
            Supported under Windows Vista and later only. Applies to all methods of WinUsb.
            </remarks>
        </member>
        <member name="M:MKY.Win32.WinUsb.TryGetConfigurationDescriptor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32,System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Tries to retrieve a requested configuration descriptor.
            </summary>
            <remarks>
            Supported under Windows Vista and later only. Applies to all methods of WinUsb.
            </remarks>
        </member>
        <member name="M:MKY.Win32.WinUsb.TryGetStringDescriptor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Tries to retrieve a requested string descriptor.
            </summary>
            <remarks>
            Supported under Windows Vista and later only. Applies to all methods of WinUsb.
            </remarks>
        </member>
        <member name="M:MKY.Win32.WinUsb.GetCultureSpecificStrings(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int32,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Returns all culture specific strings of the given index string descriptor.
            </summary>
        </member>
    </members>
</doc>
