/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPOWERCONTROL_H
#define _MOCKPOWERCONTROL_H

#include "PowerControl.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockPowerControl_Init(void);
void MockPowerControl_Destroy(void);
void MockPowerControl_Verify(void);




#define MP_DisablePeripheral_Ignore() MP_DisablePeripheral_CMockIgnore()
void MP_DisablePeripheral_CMockIgnore(void);
#define MP_DisablePeripheral_ExpectAnyArgs() MP_DisablePeripheral_CMockExpectAnyArgs(__LINE__)
void MP_DisablePeripheral_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_DisablePeripheral_Expect() MP_DisablePeripheral_CMockExpect(__LINE__)
void MP_DisablePeripheral_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_DisablePeripheral_CALLBACK)(int cmock_num_calls);
void MP_DisablePeripheral_StubWithCallback(CMOCK_MP_DisablePeripheral_CALLBACK Callback);
#define MP_SleepUntilWokenByRelaxationOscillator_Ignore() MP_SleepUntilWokenByRelaxationOscillator_CMockIgnore()
void MP_SleepUntilWokenByRelaxationOscillator_CMockIgnore(void);
#define MP_SleepUntilWokenByRelaxationOscillator_ExpectAnyArgs() MP_SleepUntilWokenByRelaxationOscillator_CMockExpectAnyArgs(__LINE__)
void MP_SleepUntilWokenByRelaxationOscillator_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_SleepUntilWokenByRelaxationOscillator_Expect() MP_SleepUntilWokenByRelaxationOscillator_CMockExpect(__LINE__)
void MP_SleepUntilWokenByRelaxationOscillator_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_SleepUntilWokenByRelaxationOscillator_CALLBACK)(int cmock_num_calls);
void MP_SleepUntilWokenByRelaxationOscillator_StubWithCallback(CMOCK_MP_SleepUntilWokenByRelaxationOscillator_CALLBACK Callback);
#define MP_EnableMainCircuitPower_Ignore() MP_EnableMainCircuitPower_CMockIgnore()
void MP_EnableMainCircuitPower_CMockIgnore(void);
#define MP_EnableMainCircuitPower_ExpectAnyArgs() MP_EnableMainCircuitPower_CMockExpectAnyArgs(__LINE__)
void MP_EnableMainCircuitPower_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_EnableMainCircuitPower_Expect() MP_EnableMainCircuitPower_CMockExpect(__LINE__)
void MP_EnableMainCircuitPower_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_EnableMainCircuitPower_CALLBACK)(int cmock_num_calls);
void MP_EnableMainCircuitPower_StubWithCallback(CMOCK_MP_EnableMainCircuitPower_CALLBACK Callback);
#define MP_DisableMainCircuitPower_Ignore() MP_DisableMainCircuitPower_CMockIgnore()
void MP_DisableMainCircuitPower_CMockIgnore(void);
#define MP_DisableMainCircuitPower_ExpectAnyArgs() MP_DisableMainCircuitPower_CMockExpectAnyArgs(__LINE__)
void MP_DisableMainCircuitPower_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_DisableMainCircuitPower_Expect() MP_DisableMainCircuitPower_CMockExpect(__LINE__)
void MP_DisableMainCircuitPower_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_DisableMainCircuitPower_CALLBACK)(int cmock_num_calls);
void MP_DisableMainCircuitPower_StubWithCallback(CMOCK_MP_DisableMainCircuitPower_CALLBACK Callback);
#define MP_EnableFvr_Ignore() MP_EnableFvr_CMockIgnore()
void MP_EnableFvr_CMockIgnore(void);
#define MP_EnableFvr_ExpectAnyArgs() MP_EnableFvr_CMockExpectAnyArgs(__LINE__)
void MP_EnableFvr_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_EnableFvr_Expect() MP_EnableFvr_CMockExpect(__LINE__)
void MP_EnableFvr_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_EnableFvr_CALLBACK)(int cmock_num_calls);
void MP_EnableFvr_StubWithCallback(CMOCK_MP_EnableFvr_CALLBACK Callback);
#define MP_EnableTemperatureIndicator_Ignore() MP_EnableTemperatureIndicator_CMockIgnore()
void MP_EnableTemperatureIndicator_CMockIgnore(void);
#define MP_EnableTemperatureIndicator_ExpectAnyArgs() MP_EnableTemperatureIndicator_CMockExpectAnyArgs(__LINE__)
void MP_EnableTemperatureIndicator_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_EnableTemperatureIndicator_Expect() MP_EnableTemperatureIndicator_CMockExpect(__LINE__)
void MP_EnableTemperatureIndicator_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_EnableTemperatureIndicator_CALLBACK)(int cmock_num_calls);
void MP_EnableTemperatureIndicator_StubWithCallback(CMOCK_MP_EnableTemperatureIndicator_CALLBACK Callback);
#define MP_SetReferenceVoltageBoost_Ignore() MP_SetReferenceVoltageBoost_CMockIgnore()
void MP_SetReferenceVoltageBoost_CMockIgnore(void);
#define MP_SetReferenceVoltageBoost_ExpectAnyArgs() MP_SetReferenceVoltageBoost_CMockExpectAnyArgs(__LINE__)
void MP_SetReferenceVoltageBoost_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_SetReferenceVoltageBoost_Expect(cmock_arg1) MP_SetReferenceVoltageBoost_CMockExpect(__LINE__, cmock_arg1)
void MP_SetReferenceVoltageBoost_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1);
typedef void (* CMOCK_MP_SetReferenceVoltageBoost_CALLBACK)(uint8_t cmock_arg1, int cmock_num_calls);
void MP_SetReferenceVoltageBoost_StubWithCallback(CMOCK_MP_SetReferenceVoltageBoost_CALLBACK Callback);
#define MP_SetReferenceVoltageBoost_IgnoreArg_cmock_arg1() MP_SetReferenceVoltageBoost_CMockIgnoreArg_cmock_arg1(__LINE__)
void MP_SetReferenceVoltageBoost_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define MP_EnablePumpPWM_Ignore() MP_EnablePumpPWM_CMockIgnore()
void MP_EnablePumpPWM_CMockIgnore(void);
#define MP_EnablePumpPWM_ExpectAnyArgs() MP_EnablePumpPWM_CMockExpectAnyArgs(__LINE__)
void MP_EnablePumpPWM_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_EnablePumpPWM_Expect() MP_EnablePumpPWM_CMockExpect(__LINE__)
void MP_EnablePumpPWM_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_EnablePumpPWM_CALLBACK)(int cmock_num_calls);
void MP_EnablePumpPWM_StubWithCallback(CMOCK_MP_EnablePumpPWM_CALLBACK Callback);
#define MP_DisablePumpPWM_Ignore() MP_DisablePumpPWM_CMockIgnore()
void MP_DisablePumpPWM_CMockIgnore(void);
#define MP_DisablePumpPWM_ExpectAnyArgs() MP_DisablePumpPWM_CMockExpectAnyArgs(__LINE__)
void MP_DisablePumpPWM_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_DisablePumpPWM_Expect() MP_DisablePumpPWM_CMockExpect(__LINE__)
void MP_DisablePumpPWM_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_DisablePumpPWM_CALLBACK)(int cmock_num_calls);
void MP_DisablePumpPWM_StubWithCallback(CMOCK_MP_DisablePumpPWM_CALLBACK Callback);
#define MP_EnableExternalPeripheralsSupply_Ignore() MP_EnableExternalPeripheralsSupply_CMockIgnore()
void MP_EnableExternalPeripheralsSupply_CMockIgnore(void);
#define MP_EnableExternalPeripheralsSupply_ExpectAnyArgs() MP_EnableExternalPeripheralsSupply_CMockExpectAnyArgs(__LINE__)
void MP_EnableExternalPeripheralsSupply_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_EnableExternalPeripheralsSupply_Expect() MP_EnableExternalPeripheralsSupply_CMockExpect(__LINE__)
void MP_EnableExternalPeripheralsSupply_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_EnableExternalPeripheralsSupply_CALLBACK)(int cmock_num_calls);
void MP_EnableExternalPeripheralsSupply_StubWithCallback(CMOCK_MP_EnableExternalPeripheralsSupply_CALLBACK Callback);
#define MP_DisableExternalPeripheralsSupply_Ignore() MP_DisableExternalPeripheralsSupply_CMockIgnore()
void MP_DisableExternalPeripheralsSupply_CMockIgnore(void);
#define MP_DisableExternalPeripheralsSupply_ExpectAnyArgs() MP_DisableExternalPeripheralsSupply_CMockExpectAnyArgs(__LINE__)
void MP_DisableExternalPeripheralsSupply_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_DisableExternalPeripheralsSupply_Expect() MP_DisableExternalPeripheralsSupply_CMockExpect(__LINE__)
void MP_DisableExternalPeripheralsSupply_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_DisableExternalPeripheralsSupply_CALLBACK)(int cmock_num_calls);
void MP_DisableExternalPeripheralsSupply_StubWithCallback(CMOCK_MP_DisableExternalPeripheralsSupply_CALLBACK Callback);
#define MP_GetBoostDemand_IgnoreAndReturn(cmock_retval) MP_GetBoostDemand_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MP_GetBoostDemand_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define MP_GetBoostDemand_ExpectAnyArgsAndReturn(cmock_retval) MP_GetBoostDemand_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void MP_GetBoostDemand_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define MP_GetBoostDemand_ExpectAndReturn(cmock_retval) MP_GetBoostDemand_CMockExpectAndReturn(__LINE__, cmock_retval)
void MP_GetBoostDemand_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_MP_GetBoostDemand_CALLBACK)(int cmock_num_calls);
void MP_GetBoostDemand_StubWithCallback(CMOCK_MP_GetBoostDemand_CALLBACK Callback);
#define MP_SetBoostDemand_Ignore() MP_SetBoostDemand_CMockIgnore()
void MP_SetBoostDemand_CMockIgnore(void);
#define MP_SetBoostDemand_ExpectAnyArgs() MP_SetBoostDemand_CMockExpectAnyArgs(__LINE__)
void MP_SetBoostDemand_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_SetBoostDemand_Expect(cmock_arg1) MP_SetBoostDemand_CMockExpect(__LINE__, cmock_arg1)
void MP_SetBoostDemand_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1);
typedef void (* CMOCK_MP_SetBoostDemand_CALLBACK)(uint8_t cmock_arg1, int cmock_num_calls);
void MP_SetBoostDemand_StubWithCallback(CMOCK_MP_SetBoostDemand_CALLBACK Callback);
#define MP_SetBoostDemand_IgnoreArg_cmock_arg1() MP_SetBoostDemand_CMockIgnoreArg_cmock_arg1(__LINE__)
void MP_SetBoostDemand_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define MP_GetInitBoostDemand_IgnoreAndReturn(cmock_retval) MP_GetInitBoostDemand_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void MP_GetInitBoostDemand_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define MP_GetInitBoostDemand_ExpectAnyArgsAndReturn(cmock_retval) MP_GetInitBoostDemand_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void MP_GetInitBoostDemand_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define MP_GetInitBoostDemand_ExpectAndReturn(cmock_retval) MP_GetInitBoostDemand_CMockExpectAndReturn(__LINE__, cmock_retval)
void MP_GetInitBoostDemand_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_MP_GetInitBoostDemand_CALLBACK)(int cmock_num_calls);
void MP_GetInitBoostDemand_StubWithCallback(CMOCK_MP_GetInitBoostDemand_CALLBACK Callback);
#define MP_SetInitBoostDemand_Ignore() MP_SetInitBoostDemand_CMockIgnore()
void MP_SetInitBoostDemand_CMockIgnore(void);
#define MP_SetInitBoostDemand_ExpectAnyArgs() MP_SetInitBoostDemand_CMockExpectAnyArgs(__LINE__)
void MP_SetInitBoostDemand_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_SetInitBoostDemand_Expect(demand) MP_SetInitBoostDemand_CMockExpect(__LINE__, demand)
void MP_SetInitBoostDemand_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t demand);
typedef void (* CMOCK_MP_SetInitBoostDemand_CALLBACK)(uint8_t demand, int cmock_num_calls);
void MP_SetInitBoostDemand_StubWithCallback(CMOCK_MP_SetInitBoostDemand_CALLBACK Callback);
#define MP_SetInitBoostDemand_IgnoreArg_demand() MP_SetInitBoostDemand_CMockIgnoreArg_demand(__LINE__)
void MP_SetInitBoostDemand_CMockIgnoreArg_demand(UNITY_LINE_TYPE cmock_line);
#define isPumpPwmEnabled_IgnoreAndReturn(cmock_retval) isPumpPwmEnabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void isPumpPwmEnabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define isPumpPwmEnabled_ExpectAnyArgsAndReturn(cmock_retval) isPumpPwmEnabled_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void isPumpPwmEnabled_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define isPumpPwmEnabled_ExpectAndReturn(cmock_retval) isPumpPwmEnabled_CMockExpectAndReturn(__LINE__, cmock_retval)
void isPumpPwmEnabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_isPumpPwmEnabled_CALLBACK)(int cmock_num_calls);
void isPumpPwmEnabled_StubWithCallback(CMOCK_isPumpPwmEnabled_CALLBACK Callback);
#define isMainCircuitPowerEnabled_IgnoreAndReturn(cmock_retval) isMainCircuitPowerEnabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void isMainCircuitPowerEnabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define isMainCircuitPowerEnabled_ExpectAnyArgsAndReturn(cmock_retval) isMainCircuitPowerEnabled_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void isMainCircuitPowerEnabled_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define isMainCircuitPowerEnabled_ExpectAndReturn(cmock_retval) isMainCircuitPowerEnabled_CMockExpectAndReturn(__LINE__, cmock_retval)
void isMainCircuitPowerEnabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
typedef bool_t (* CMOCK_isMainCircuitPowerEnabled_CALLBACK)(int cmock_num_calls);
void isMainCircuitPowerEnabled_StubWithCallback(CMOCK_isMainCircuitPowerEnabled_CALLBACK Callback);
#define MP_EnableRelaxationOscillator_Ignore() MP_EnableRelaxationOscillator_CMockIgnore()
void MP_EnableRelaxationOscillator_CMockIgnore(void);
#define MP_EnableRelaxationOscillator_ExpectAnyArgs() MP_EnableRelaxationOscillator_CMockExpectAnyArgs(__LINE__)
void MP_EnableRelaxationOscillator_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_EnableRelaxationOscillator_Expect() MP_EnableRelaxationOscillator_CMockExpect(__LINE__)
void MP_EnableRelaxationOscillator_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_EnableRelaxationOscillator_CALLBACK)(int cmock_num_calls);
void MP_EnableRelaxationOscillator_StubWithCallback(CMOCK_MP_EnableRelaxationOscillator_CALLBACK Callback);
#define MP_DeepSleep_Ignore() MP_DeepSleep_CMockIgnore()
void MP_DeepSleep_CMockIgnore(void);
#define MP_DeepSleep_ExpectAnyArgs() MP_DeepSleep_CMockExpectAnyArgs(__LINE__)
void MP_DeepSleep_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define MP_DeepSleep_Expect() MP_DeepSleep_CMockExpect(__LINE__)
void MP_DeepSleep_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MP_DeepSleep_CALLBACK)(int cmock_num_calls);
void MP_DeepSleep_StubWithCallback(CMOCK_MP_DeepSleep_CALLBACK Callback);

#endif
