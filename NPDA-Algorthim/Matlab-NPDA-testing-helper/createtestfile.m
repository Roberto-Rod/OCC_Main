function [] = createtestfile( file_out, file_out_path, header_filenames, var_names )
%CREATETESTFILE Creates test file with cal and scan data compatible with ceedling tests

    file = fopen(file_out_path,'w');

    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/** @file %s\n', file_out);
    fprintf(file,' *\n');
    fprintf(file,' *  @brief Module tests verifying npda.c module.\n');
    fprintf(file,' *\n');
    fprintf(file,' *  @copyright Occuity Limited (c) 2020\n');
    fprintf(file,' */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'\n');
    fprintf(file,'#ifndef TEST_FILE_C /* Guard against accidental multiple inclusion */\n');
    fprintf(file,'#define TEST_FILE_C\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/* Section: Included Files                                                    */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'\n');
    fprintf(file,'/* Header file for selective initialisation of hardware modules. */\n');
    fprintf(file,'#include "init_minimum_plus_timer.h" \n');
    fprintf(file,'/* Library containing the test harness. */\n');
    fprintf(file,'#include "unity.h" \n');
    fprintf(file,'/* Header file for memory monitoring. */\n');
    fprintf(file,'#include "stack_monitoring.h"\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/* Include additional files to compile here                                   */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'//TEST_FILE("file_to_compile.c")\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/* Include files to test here                                                 */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'#include "pdab_types.h"\n');
    for i=1:length(header_filenames)
        fprintf(file,'#include "%s"\n', header_filenames{i});
    end
    fprintf(file,'#include "npda.h"\n');
    fprintf(file,'#include "npda_tools.h"\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/* Section: File Scope or Global Data                                         */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/** This enum variable ensures that the stack_monitoring code has been executed once */\n');
    fprintf(file,'typedef enum {FIRST, CONSECUTIVE} run_time;\n');
    fprintf(file,'/** This variable stores amount of unused stack (in bytes) */\n');
    fprintf(file,'unsigned int unused_stack;\n');
    fprintf(file,'\n');
    fprintf(file,'/** This variable stores SCAN_BUFFER data, which is output from the NPDA alogithm  */\n');
    fprintf(file,'//_SCAN_BUFFER result;\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/* Section: Local Functions                                                   */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/* Section: Interface Functions                                               */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/** \n');
    fprintf(file,' * @brief            This function contains code to be executed before unit\n');
    fprintf(file,' *                   tests.\n');
    fprintf(file,' *\n');
    fprintf(file,' * @note             For testing npda.c, memory monitoring is enabled. \n');
    fprintf(file,' */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'void setUp(void)\n');
    fprintf(file,'{\n');
    fprintf(file,'    static run_time run_time = FIRST;\n');
    fprintf(file,'    if(run_time == FIRST)\n');
    fprintf(file,'    {\n');
    fprintf(file,'        MEMORY_OBJ mem_state;\n');
    fprintf(file,'        stack_monitoring_init(&mem_state);\n');
    fprintf(file,'        unused_stack = stack_monitoring_measure_unused_stack();\n');
    fprintf(file,'        UnityPrint("TEST FILE: test_m_npda.c: ");\n');
    fprintf(file,'        UnityPrint("Data mem usage: ");\n');
    fprintf(file,'		  UnityPrintNumberUnsigned(mem_state.data_size);\n');
    fprintf(file,'        UnityPrint("b. Heap size: ");\n');
    fprintf(file,'		  UnityPrintNumberUnsigned(mem_state.heap_size);\n');
    fprintf(file,'        UnityPrint("b. Stack size: ");\n');
    fprintf(file,'		  UnityPrintNumberUnsigned(mem_state.stack_size);\n');
    fprintf(file,'        UnityPrint("b of which ");\n');
    fprintf(file,'		  UnityPrintNumberUnsigned(mem_state.stack_size - unused_stack);\n');
    fprintf(file,'        UnityPrint("b are used. ");\n');
    fprintf(file,'		  \n');
    fprintf(file,'        run_time = CONSECUTIVE;\n');
    fprintf(file,'        \n');
    fprintf(file,'    }\n');
    fprintf(file,'\n');
    fprintf(file,'}\n');
    fprintf(file,'\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'/** \n');
    fprintf(file,' * @brief            This function contains code to be executed after unit\n');
    fprintf(file,' *                   tests.\n');
    fprintf(file,' *\n');
    fprintf(file,' * @note             For testing npda.c nothing needs to be set up. \n');
    fprintf(file,' */\n');
    fprintf(file,'/* ************************************************************************** */\n');
    fprintf(file,'void tearDown(void)\n');
    fprintf(file,'{\n');
    fprintf(file,'}\n');
    fprintf(file,'\n');
    for i=1:length(var_names)
        fprintf(file,'/* ************************************************************************** */\n');
        fprintf(file,'/** \n');
        fprintf(file,' * @brief            Function tested: run_npda()\n');
        fprintf(file,' *\n');
        fprintf(file,' * @test             Runs run_npda() fuction and measures execution time, max\n');
        fprintf(file,' *                   stack usage and whether peak separation is correct based on\n');
        fprintf(file,' *                   data and calibration from %s.\n', header_filenames{i});
        fprintf(file,' *\n');
        fprintf(file,' * @note             None\n');
        fprintf(file,' */\n');
        fprintf(file,'/* ************************************************************************** */\n');
        fprintf(file,'void test_npda_%s(void)\n', var_names{i});
        fprintf(file,'{\n');
        fprintf(file,'    int iret;\n');
        fprintf(file,'    _SCAN_BUFFER result;\n');
        fprintf(file,'    unsigned int time;\n');
        fprintf(file,'    unsigned int stack_usage;\n');
        fprintf(file,'    \n');
        fprintf(file,'    unity_helper_tic();\n');
        fprintf(file,'    iret = run_npda( &scanData_%s, &result, cal_data_%s );\n', var_names{i}, var_names{i});
        fprintf(file,'    time = unity_helper_toc();\n');
        fprintf(file,'    stack_usage = unused_stack - stack_monitoring_measure_unused_stack();\n');
        fprintf(file,'    \n');
        fprintf(file,'    UnityPrint("TEST: run_npda: ");\n');
        fprintf(file,'    UnityPrint("Execution time: ");\n');
        fprintf(file,'    UnityPrintNumberUnsigned(time);\n');
        fprintf(file,'    UnityPrint("us. ");\n');
        fprintf(file,'    UnityPrint("Max stack usage: ");\n');
        fprintf(file,'    UnityPrintNumberUnsigned(stack_usage);\n');
        fprintf(file,'    UnityPrint("bytes.");\n');
        fprintf(file,'\n');
        fprintf(file,'    TEST_ASSERT_EQUAL_INT(expected_iret_%s, iret);\n', var_names{i});
        fprintf(file,'    if(expected_iret_%s != ERROR_TOO_FEW_BLOCKS && expected_iret_%s != ERROR_PC_PEAKS_TOO_SMALL && expected_iret_%s != ERROR_SPREAD_TOO_HIGH) {\n', var_names{i}, var_names{i}, var_names{i});
        fprintf(file,'        TEST_ASSERT_FLOAT_WITHIN(0.1, expected_cor_thickness_%s, result.Header.Measurement.Separation[0]);\n', var_names{i});
        fprintf(file,'        TEST_ASSERT_FLOAT_WITHIN(0.1, expected_cor_thickness_acuracy_%s, result.Header.Measurement.Precision[0]);\n', var_names{i});
        fprintf(file,'        TEST_ASSERT_EQUAL_INT(expected_valid_blocks_%s, result.Header.Blocks);\n', var_names{i});
        fprintf(file,'   }\n');
        fprintf(file,'}\n');
        fprintf(file,'\n');
    end
    fprintf(file,'#endif //TEST_FILE_C\n');
    fclose(file);

end