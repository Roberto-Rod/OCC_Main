path_out = 'C:\Users\PiotrLaszczak\MPLABXProjects\PDA-Module-dev\PDA-Module\firmware\test';

for i=1:25
    file_out = sprintf('%s\\test_u_npda_tools_median_uint16_t_%02d.c', path_out, i);
    f = fopen(file_out, 'w');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/** @file test_u_npda_tools_median_uint16_t_%02d.c\n',i);
    fprintf(f, ' *\n');
    fprintf(f, ' *  @brief Module tests verifying npda.c module.\n');
    fprintf(f, ' *\n');
    fprintf(f, ' *  @copyright Occuity Limited (c) 2020\n');
    fprintf(f, ' */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '\n');
    fprintf(f, '#ifndef TEST_FILE_C /* Guard against accidental multiple inclusion */\n');
    fprintf(f, '#define TEST_FILE_C\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/* Section: Included Files                                                    */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '\n');
    fprintf(f, '/* Header file for selective initialisation of hardware modules. */\n');
    fprintf(f, '#include "init_minimum_plus_timer.h" \n');
    fprintf(f, '/* Library containing the test harness. */\n');
    fprintf(f, '#include "unity.h" \n');
    fprintf(f, '/* Header file for memory monitoring. */\n');
    fprintf(f, '#include "stack_monitoring.h"\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/* Include additional files to compile here                                   */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '//TEST_FILE("file_to_compile.c")\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/* Include files to test here                                                 */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '#include "pdab_types.h"\n');
    fprintf(f, '#include "npda.h"\n');
    fprintf(f, '#include "npda_tools.h"\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/* Section: File Scope or Global Data                                         */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/** This enum variable ensures that the stack_monitoring code has been executed once */\n');
    fprintf(f, 'typedef enum {FIRST, CONSECUTIVE} run_time;\n');
    fprintf(f, '/** This variable stores amount of unused stack (in bytes) */\n');
    fprintf(f, 'unsigned int unused_stack;\n');
    for j=1:40
        fprintf(f, '/** This variable stores data, from which median is to be calculated */\n');
        fprintf(f, 'uint16_t table_to_calc_median_%02d[5000] = {', j);
        data = rand([1,5000]);
        data = data .* 65535;
        data = round(data);
        for k = 1:5000
            fprintf(f, '%d', data(k));
            if k ~= 5000
                fprintf(f, ', ');
            end
            if mod(k,1000) == 0 && k~=0 && k~=5000
                fprintf(f, '\n');
            end
        end
        fprintf(f, '};\n');
        fprintf(f, '/** This variable stores median of the vector above */\n');
        sdata = sort(data);
        fprintf(f, 'uint16_t exp_median_%02d = %d;\n', j, sdata(2500));
    end
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/* Section: Local Functions                                                   */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/* Section: Interface Functions                                               */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/** \n');
    fprintf(f, ' * @brief            This function contains code to be executed before unit\n');
    fprintf(f, ' *                   tests.\n');
    fprintf(f, ' *\n');
    fprintf(f, ' * @note             For testing npda.c, memory monitoring is enabled. \n');
    fprintf(f, ' */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, 'void setUp(void)\n');
    fprintf(f, '{\n');
    fprintf(f, '    static run_time run_time = FIRST;\n');
    fprintf(f, '    if(run_time == FIRST)\n');
    fprintf(f, '    {\n');
    fprintf(f, '		MEMORY_OBJ mem_state;\n');
    fprintf(f, '        stack_monitoring_init(&mem_state);\n');
    fprintf(f, '        unused_stack = stack_monitoring_measure_unused_stack();\n');
    fprintf(f, '        UnityPrint("TEST FILE: test_u_npda_tools_median_uint16_t_%02d.c: ");\n', i);
    fprintf(f, '        UnityPrint("Data mem usage: ");\n');
    fprintf(f, '		UnityPrintNumberUnsigned(mem_state.data_size);\n');
    fprintf(f, '        UnityPrint("b. Heap size: ");\n');
    fprintf(f, '		UnityPrintNumberUnsigned(mem_state.heap_size);\n');
    fprintf(f, '        UnityPrint("b. Stack size: ");\n');
    fprintf(f, '		UnityPrintNumberUnsigned(mem_state.stack_size);\n');
    fprintf(f, '        UnityPrint("b of which ");\n');
    fprintf(f, '		UnityPrintNumberUnsigned(mem_state.stack_size - unused_stack);\n');
    fprintf(f, '        UnityPrint("b are used. ");\n');
    fprintf(f, '\n');
    fprintf(f, '        run_time = CONSECUTIVE;\n');
    fprintf(f, '\n');
    fprintf(f, '    }\n');
    fprintf(f, '\n');
    fprintf(f, '}\n');
    fprintf(f, '\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, '/** \n');
    fprintf(f, ' * @brief            This function contains code to be executed after unit\n');
    fprintf(f, ' *                   tests.\n');
    fprintf(f, ' *\n');
    fprintf(f, ' * @note             For testing npda.c nothing needs to be set up. \n');
    fprintf(f, ' */\n');
    fprintf(f, '/* ************************************************************************** */\n');
    fprintf(f, 'void tearDown(void)\n');
    fprintf(f, '{\n');
    fprintf(f, '}\n');
    fprintf(f, '\n');
    for j=1:40
        fprintf(f, '/* ************************************************************************** */\n');
        fprintf(f, '/** \n');
        fprintf(f, ' * @brief            Function tested: median_uint16_t()\n');
        fprintf(f, ' *\n');
        fprintf(f, ' * @test             Runs median_uint16_t() fuction and measures execution time and max\n');
        fprintf(f, ' *                   stack usage.\n');
        fprintf(f, ' *\n');
        fprintf(f, ' * @note             None\n');
        fprintf(f, ' */\n');
        fprintf(f, '/* ************************************************************************** */\n');
        fprintf(f, '\n');
        fprintf(f, 'void test_median_uint16_t_%02d(void)\n', j);
        fprintf(f, '{\n');
        fprintf(f, '	uint16_t iret;\n');
        fprintf(f, '    unsigned int time;\n');
        fprintf(f, '    unsigned int stack_usage;\n');
        fprintf(f, '\n');
        fprintf(f, '    unity_helper_tic();\n');
        fprintf(f, '    iret = median_uint16_t( table_to_calc_median_%02d, 5000 );\n', j);
        fprintf(f, '    time = unity_helper_toc();\n');
        fprintf(f, '    stack_usage = unused_stack - stack_monitoring_measure_unused_stack();\n');
        fprintf(f, '\n');
        fprintf(f, '    UnityPrint("TEST: run_npda: ");\n');
        fprintf(f, '    UnityPrint("Execution time: ");\n');
        fprintf(f, '    UnityPrintNumberUnsigned(time);\n');
        fprintf(f, '    UnityPrint("us. ");\n');
        fprintf(f, '    UnityPrint("Max stack usage: ");\n');
        fprintf(f, '    UnityPrintNumberUnsigned(stack_usage);\n');
        fprintf(f, '    UnityPrint("bytes.");\n');
        fprintf(f, '\n');
        fprintf(f, '    TEST_ASSERT_EQUAL_UINT(exp_median_%02d, iret);\n', j);
        fprintf(f, '}\n');
        fprintf(f, '\n');
    end
    fprintf(f, '#endif //TEST_FILE_C\n');
    fclose(f);
end